{"version":3,"file":"mfld.mod.js","sources":["../../src/updates.js","../../src/store.js","../../src/http.js","../../src/registrar.js","../../src/index.module.js"],"sourcesContent":["import { _store, _workOrder } from \"./store.js\";\r\n/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\r\n\r\n/** @type {{ adjust?: Function, space?: Function, size?: Function } | undefined} */\r\nlet smartOutro = globalThis.smartOutro;\r\n\r\n/**\r\n * @typedef {Object} DomWorkOrder\r\n * @property {HTMLElement} in - The input HTMLElement\r\n * @property {HTMLElement} out - The output HTMLElement\r\n * @property {string} relation - The relation between the input and output elements\r\n * @property {Partial<MfldOps>} ops - The fetch options for the operation\r\n * @property {(el: HTMLElement | null) => void} done - The callback function to be executed when the operation is done\r\n */\r\n\r\n/** @type {(DomWorkOrder | Function)[]} */ let workArray = [];\r\nlet cancelAnimationFrame = false;\r\n/** @type {Map<string, (any | ((any)=> any))>} */\r\n\r\n// Next tick queue\r\n/**\r\n * @type {Function[]}\r\n */\r\nlet _nextTickQueue = [];\r\n\r\n// Polyfill requestAnimationFrame\r\nlet tick = globalThis?.requestAnimationFrame || ((fn)=> setTimeout(fn, 0));\r\n\r\nexport function _addToNextTickQueue(fn) {\r\n    if(fn) _nextTickQueue.push(fn);\r\n}\r\n\r\n/** @export @param {(DomWorkOrder | Function)} update */\r\nexport function _scheduleUpdate(update) {\r\n    workArray.push(update);\r\n    if(!cancelAnimationFrame) {\r\n        cancelAnimationFrame = true;\r\n        tick(_runUpdates);\r\n    }\r\n}\r\n\r\nfunction _runUpdates() {\r\n    cancelAnimationFrame = false;\r\n\r\n    // Update stores and cascade downstream\r\n    let dsStores = new Set();\r\n    for(let [storeName] of _workOrder) {\r\n        let S = _store(storeName);\r\n        for(let [ref, sub] of S?._subscriptions || []) sub?.(S.value, ref);\r\n\r\n        // @ts-ignore\r\n        for(let [_, downstream] of MfSt) {\r\n            // Make a downstream set to prevent duplicating work\r\n            if(downstream._upstreamStores?.has(storeName)) dsStores.add(downstream);\r\n        }\r\n    }\r\n\r\n    for(let store of dsStores) {\r\n        store.update(\r\n            store._updater?.(\r\n                Array.from(store._upstreamStores)?.map(store => _store(store)?.value) || [], \r\n                /** @type {T} */(store?.value)\r\n            ) || store.value,\r\n        )\r\n    }\r\n\r\n    // Clear work order\r\n    _workOrder.clear();\r\n    \r\n    /**\r\n    * @type {DomWorkOrder[]}\r\n    */\r\n    for(let order of workArray) {\r\n        if(typeof order === \"function\") (/** @type {Function} */ order)();\r\n        else {\r\n            // Remove old children\r\n            if([\">\", \"+\"].includes(order.relation)) {\r\n                if(order.relation == \">\") {\r\n                    //Remove old children before appending\r\n                    let container = document?.createElement(\"div\");\r\n                    for(let child of Array.from(order.out?.childNodes || [])) {\r\n                        container.appendChild(child);\r\n                    }\r\n                    order.out?.replaceChildren(container);\r\n                    _applyTransition(container, \"out\", order.ops);\r\n                }\r\n\r\n                smartOutro?.space?.(order.in, order.out);\r\n\r\n                //Append\r\n                _applyTransition(order.in, \"in\", order.ops, ()=> {\r\n                    if(order.in) order.out?.appendChild(order.in);\r\n                    smartOutro?.adjust?.(order.in, order.ops);\r\n                });\r\n            }\r\n            //Insert after old element before removing\r\n            else _applyTransition(order.in, \"in\", order.ops, ()=> {\r\n                order.out?.after(order.in);\r\n                smartOutro?.space?.(order.in, order.out);\r\n                smartOutro?.adjust?.(order.in, order.ops);\r\n\r\n                //Remove old element\r\n                if(order.relation === \"/\") _applyTransition(order.out, \"out\", order.ops);\r\n            });\r\n\r\n            order.done?.(order.in);\r\n        }\r\n    }\r\n\r\n    //Handle queued nextTick functions\r\n    _nextTickQueue.forEach(fn=> fn());\r\n    _nextTickQueue = [];\r\n    workArray = [];\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el \r\n * @param {\"in\" | \"out\"} dir \r\n * @param {Partial<MfldOps>} ops \r\n * @param {Function} [fn] \r\n * @returns \r\n */\r\nfunction _applyTransition(el, dir, ops, fn) {\r\n    //Handle text nodes\r\n    if(el?.nodeType == Node.TEXT_NODE) {\r\n        let text = el.textContent;\r\n        let newNode = document?.createElement(\"div\");\r\n        newNode.textContent = text;\r\n        el.replaceWith(newNode);\r\n        el = newNode;\r\n    }\r\n\r\n    if(el) {\r\n        let dur = Array.isArray(ops.trans?.dur) ? ops.trans?.dur[dir == \"in\" ? 0 : 1] || ops.trans?.dur[0] : ops.trans?.dur || 0;\r\n\r\n        //Initiate transition\r\n        let transClass = ops?.trans?.class || \"mf-trans\";\r\n        el?.classList?.add(transClass);\r\n        ops.trans?.hooks?.[`${dir}-start`]?.(el);\r\n\r\n        //Wait to apply class\r\n        if(dir == \"out\") {\r\n            _scheduleUpdate(()=> {\r\n                smartOutro?.size?.(el);\r\n                if(dur) el.style.transitionDuration = `${dur}ms`;\r\n                el.classList?.add(dir);\r\n            })\r\n        }\r\n        //If dir == in\r\n        else {\r\n            setTimeout(()=> {\r\n                _scheduleUpdate(()=> {\r\n                    if(dur) el.style.transitionDuration = `${dur}ms`;\r\n                    el?.classList?.add(dir);\r\n                    fn?.();\r\n\r\n                    //Remove transition class\r\n                    _scheduleUpdate(()=> {\r\n                        el?.classList?.remove(dir);\r\n                    });\r\n                });\r\n            }, ops.trans?.swap || 0);\r\n        }\r\n        \r\n        setTimeout(()=> {\r\n            _scheduleUpdate(()=> {\r\n                //Wrapup\r\n                if(dir == \"out\") el?.remove();\r\n                el?.classList?.remove(transClass);\r\n                el?.classList?.remove(dir);\r\n                ops.trans?.hooks?.[`${dir}-end`]?.(el);\r\n            });\r\n        }, \r\n        dur + (dir == \"in\" ? ops.trans?.swap || 0 : 0));\r\n    }\r\n}","/** \n * @template T\n * @typedef {import(\"./index.module.js\").UpdaterFunction<T>} UpdaterFunction \n */\n/** \n * @template T\n * @typedef {import(\"./index.module.js\").StoreOptions<T>} StoreOptions \n */\n\nimport { _scheduleUpdate } from \"./updates.js\";\n\n/**\n * @callback SubFunction\n * @param {any} value\n * @param {string} [ref]\n * @returns {void}\n */\n\n/**\n * @param {any} input \n * @returns {any}\n */\nfunction _hashAny(input) {\n    if(!input) return 0;\n    if(typeof input === 'number') return input;\n    if(input === true) return 1;\n\n    if(input instanceof Map) return _hashAny(Array.from(input.entries()));\n    else if(input instanceof Set) return _hashAny(Array.from(input));\n\n    let hash = 0;\n    for(let char of new TextEncoder().encode(\n        typeof input === 'string' ? input : input?.toString() || \"\"\n    )) \n        hash = ((hash << 5) - hash) + char;\n    return hash;\n}\n\n//Static\n/** @type {Map<string, Store<any>>} */ if(!globalThis.MfSt) globalThis.MfSt = new Map();\n/** @type {Map<string, Function>} */ if(!globalThis.MfFn) globalThis.MfFn = new Map();\n/** @type {Map<string, (any | ((any)=> any))>} */ export let _workOrder = new Map();\n\n/**\n * @template T\n */\nexport class Store {\n    /** @type {UpdaterFunction<T> | undefined} */ _updater = undefined;\n    /** @type {Map<string, SubFunction>} */ _subscriptions = new Map();\n    /** @type {string | undefined} */ _storedHash = undefined;\n    /** @type {Set<string>} */ _upstreamStores;\n\n    /**\n     * @param {string} name\n     * @param {StoreOptions<T>} [ops]\n     */\n    constructor(name, ops) {\n        return this._modify(name, ops);        \n    }\n\n    /**\n     * @param {string} name\n     * @param {StoreOptions<T>} [ops]\n     */\n    _modify(name, ops) {\n        this.name = name;\n        // @ts-ignore\n        MfSt.set(name, this);\n        \n        this._upstreamStores = new Set(ops?.upstream || [])\n        this.value = ops?.value;\n        this._updater = ops?.updater;\n\n        return this;\n    }\n\n    /**\n     * @param {(T)=> void} sub\n     * @param {string | undefined} ref\n     */\n    sub(sub, ref) {\n        this._subscriptions.set(ref || String(Date.now() + Math.random()), sub);\n        sub?.(this.value);\n    }\n\n    //Update (manual or automated -- cascades downstream on batch updates)\n    /**\n    * @template T\n    * @param {T | ((T)=> T | Promise<T>)} value\n    */\n    async update(value) {\n        return new Promise(async (resolve)=> {\n            // Make sure an upstream store isn't scheduled to update; remove downstream stores from the work order\n            let mayDeleteDownstream = new Set();\n            for(let name of _workOrder.keys()) {\n                if(this._upstreamStores.has(name)) return;\n                if(_store(name)?._upstreamStores.has(this.name || \"\")) mayDeleteDownstream.add(name);\n            }\n\n            //Apply new value   \n            let newValue = (typeof value == \"function\" ? /** @type {Function} */(await value)?.(this.value) : value);\n            let newHash = _hashAny(newValue);\n            if(newHash !== this._storedHash) {\n                this.value = newValue;\n                this._storedHash = newHash;\n\n                // If updating, delete downstream stores and add this store to the work order\n                mayDeleteDownstream.forEach(name => _workOrder.delete(name));\n                _workOrder.set(this.name || \"\", await value);\n\n                // Wait for next animation frame to return the value\n                _scheduleUpdate(()=> {\n                    resolve(this.value);\n                });\n            }\n        });\n    }\n}\n\n/**\n * STORE STATIC METHODS\n */\n/**\n * @template T\n * @param {string} name - The name of the store\n * @param {StoreOptions<T> | T} [ops] - Options to update the store\n * @returns {Store<T>}\n */\nexport function _store(name, ops) {\n    // @ts-ignore\n    let found_store = MfSt.get(name);\n    if(ops) {\n        if(found_store) {\n            return found_store._modify(name, ops);\n        }\n        return new Store(name, ops);\n    }\n    return found_store || new Store(name, /** @type {StoreOptions<T>}*/(ops));\n}","import { _scheduleUpdate } from \"./updates.js\";\r\n\r\n//Track scripts and styles\r\nlet pageScripts = new WeakMap();\r\nlet pageStyles = new WeakMap();\r\nlet parser = globalThis.DOMParser ? new DOMParser() : undefined;\r\n\r\n/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\r\n\r\n//Fetch page and replace content\r\n/**\r\n * \r\n * @param {MfldOps} ops \r\n * @param {{method: string, href: string, el: HTMLElement}} target\r\n * @param {(el: HTMLElement | null)=> void} done \r\n * @returns \r\n */\r\nexport async function _fetchHttp(target, ops, done) {\r\n    if(!parser) return;\r\n    \r\n    //Make sure we're allowed to fetch\r\n    if(!ops.fetch?.externals?.some(allowed=> target?.href?.startsWith(allowed.domain))) {\r\n        //Fetch data\r\n        let fOps = ops.fetch;\r\n        let data = await fetch(target?.href, {\r\n            ...(fOps?.request || {}),\r\n            method: target?.method,\r\n            body: fOps?.request?.body ? JSON.stringify(fOps?.request?.body || {}) : undefined,\r\n        })\r\n        .catch(error=> {\r\n            fOps?.err?.(error);\r\n        });\r\n\r\n        //Handle onCode callback\r\n        let code = data?.status;\r\n        if(code && fOps?.onCode?.(code) == false) return;\r\n\r\n        //Return JSON or text in callback\r\n        let text = await data?.[ops.fetch?.type || \"text\"]();\r\n        ops.fetch?.cb?.(text);\r\n\r\n        if((ops?.fetch?.type) != \"json\") {\r\n            //Extract content\r\n            let fullMarkup = parser.parseFromString(text, 'text/html').body;\r\n        \r\n            // //Clear existing scripts/styles\r\n            // clearDynamicElements(parent, pageScripts, \"script\");\r\n            // clearDynamicElements(parent, pageStyles, \"style\");;\r\n\r\n            // //Get scripts and styles\r\n            // let seek: string[] = ops.allowScripts ? [\"scripts\"] : [];\r\n            // if(ops.allowStyles) seek.push(\"style\");\r\n            // if(seek.length) {\r\n            //     let globls: NodeListOf<HTMLScriptElement | HTMLStyleElement> = fullMarkup.querySelectorAll(seek.join(\",\"));\r\n            //     for(let el of globls) {\r\n            //         let isScript = el instanceof HTMLScriptElement;\r\n            //         let source = isScript ? pageScripts : pageStyles;\r\n\r\n            //         if(isScript ? ops.allowScripts : ops.allowStyles){\r\n            //             if(!source.has(parent)) source.set(parent, []);\r\n            //             source.get(parent)?.push(el as any);\r\n            //         }\r\n            //         else if(isScript) el.parentNode?.removeChild(el);\r\n            //     }\r\n            // }\r\n\r\n            // ops.replace.forEach(r => {\r\n            //     let [ extract, relation, replace ] = r.split(/\\s*(>|\\/|\\+)\\s*/);\r\n\r\n            //     // let outEl = [\"this\", \"self\"].includes(replace) ? parent : document.querySelector(replace);\r\n// globalThis.document?.\r\n            //     _scheduleUpdate({\r\n            //         in: /** @type {HTMLElement} */ (fullMarkup.querySelector(extract)),\r\n            //         out: /** @type {HTMLElement} */ ([\"this\", \"self\"].includes(replace) ? parent : document.querySelector(replace)),\r\n            //         relation,globalThis.document?.\r\n            //         ops,\r\n            //         done,\r\n            //     })\r\n            // });\r\n        }\r\n    }\r\n}\r\n\r\n// //Clear dynamic elements\r\n// function clearDynamicElements(parent: HTMLElement, map: WeakMap<HTMLElement, any[]>, type: string) {\r\n//     let elements = map.get(parent) || [];\r\n//     elements.forEach(el => el.remove());\r\n//     map.set(parent, []);\r\n// }","import { _store } from \"./store.js\";\nimport { _fetchHttp } from \"./http.js\";\nimport { _scheduleUpdate } from \"./updates.js\";\n/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\n\n/** @type {Partial<MfldOps>} */\nlet _ops = {};\n\nlet ATTR_PREFIX = \"mf\";\n\nlet _http_modes = [\"get\", \"head\", \"post\", \"put\", \"delete\", \"patch\"];\nlet _modes = [`${ATTR_PREFIX}bind`, `${ATTR_PREFIX}sync`, ..._http_modes.map(m=> `${ATTR_PREFIX}${m}`)];\nlet _commaSepRx = /, {0,}/g;\nlet _elIdx = 0;\n\n// globalThis.addEventListener(\"popstate\", (e)=> {\n//     let el = document?.getElementById(e.state?.elId);\n//     if(e?.state?.fetchData) {\n//         _fetchHttp(\n//             \"get\", \n//             \"\",\n//             e.state.fetchData,\n//             el,\n//             el=> {if(el) _registerSubs(el)}\n//         );\n//     }\n// });\n\n/**!\n * @param {Partial<MfldOps>} newops \n * @param {string} [profileName] \n */\nexport function _setOptions(newops, profileName) {\n    if(profileName) _ops.profiles = { ..._ops.profiles, [profileName]: newops };\n    else _ops = { ..._ops, ...newops };\n}\n\n//Register subscriptions on the DOM (scopable in case an update needs run on a subset of the DOM)\n/**\n * @param {HTMLElement | null} [parent] \n */\nexport function _registerSubs(parent) {   \n    /** @type {NodeListOf<HTMLElement> | []} */\n    let els = (parent || document.body).querySelectorAll(`[data-${_modes.join(\"],[data-\")}]${_ops.fetch?.auto != false ? \",a\" : \"\"}`) || [];\n\n    for(let el of els) {\n        /** @type {HTMLElement} */\n        if(!el.id) el.id = `${_elIdx++}`;\n\n        //Loop over all data attributes (modes)\n        for(let mode in el.dataset) {\n            let shouldHaveTriggers = mode != `${ATTR_PREFIX}bind`;\n            let err_detail = `(#${el.id} on ${mode})`;\n\n            //Loop over provided settings\n            el.dataset?.[mode]?.split(\";\").forEach(setting=> {\n                //Break out settings\n                let _parts = setting?.split(/(?:(?:\\)|->) ?){1,}/g) || []; \n        \n                //Extract settings\n                let triggers = shouldHaveTriggers ? _paramsInParens(_parts.splice(0,1)[0]) : [];\n                let processFuncName = _parts[0]?.includes(\"(\") ? _parts[0]?.match(/^[^\\(]{1,}/)?.[0] || \"\" : \"\";\n                let output = _paramsInParens(_parts.splice(mode == `${ATTR_PREFIX}sync` ? 1 : 0, 1)[0]);\n                let input = _paramsInParens(_parts[0]);\n\n                //Handle errors\n                if(shouldHaveTriggers && !triggers?.length) throw(`No trigger: ${err_detail}.`)\n\n                /** @type {Function | undefined} */\n                let processFunc;\n                if(processFuncName) {\n                    // @ts-ignore\n                    processFunc = globalThis[processFuncName] || MfFn?.get(processFuncName);\n                    if(!processFunc) console.warn(`\"${processFuncName}\" not registered: ${err_detail}`);\n                    if(((!shouldHaveTriggers && output.length > 1) || (shouldHaveTriggers && input.length > 1))) throw(`Multiple sources: ${err_detail}`);\n                }\n\n                //Map output names and paths\n                let outputData = output.map((ext)=> {\n                    let [ name, ...sourcePathArr ] = ext.split(/[\\.\\[\\]\\?]{1,}/g);\n                    return {\n                        name,\n                        path: sourcePathArr.map(sp=> !isNaN(parseInt(sp)) \n                            ? parseInt(sp) \n                            : sp)\n                            .filter(sp=> sp) /** @type {(string | number)[]} */\n                    }\n                });\n\n                //Loop over triggers\n                if(!triggers?.length) triggers = [\"\"]\n                for(let trigger of triggers) {\n                    /**\n                     * HANDLE MF-FETCH\n                     */\n                    //No input loops for fetch\n                    if([\"bind\", \"sync\"].includes(mode)) {\n                        _handleFetch(el, trigger);\n                    }\n\n                    //Loop over input\n                    if(!input?.length) input = [ \"\" ];\n                    for(let i=0; i < input.length; i++) {\n                        /**\n                         * HANDLE MF-BIND\n                         */\n                        if(mode == `${ATTR_PREFIX}bind`) {\n                            let domSubscription = ()=> {\n                                _scheduleUpdate(()=> {\n                                    let val = processFunc?.(\n                                        ...outputData.map(\n                                            s=> _nestedValue(_store(s.name)?.value, s.path)\n                                        ), el\n                                    ) ??\n                                    _nestedValue(\n                                        _store(outputData[0].name || \"\")?.value, outputData[0].path\n                                    );\n\n                                    if(val !== undefined) el[input[i]] = val;\n\n                                    //Make sure to update dependent stores on value update\n                                    el.dispatchEvent(new CustomEvent(trigger))\n                                });\n                            }\n                        \n                            //Add subscription - run whenever store updates\n                            for(let store of outputData) _store(store.name)?.sub(domSubscription, el.id);\n                        }\n\n                        /**\n                         * HANDLE MF-SYNC\n                         */\n                        else if(mode == `${ATTR_PREFIX}sync`) {\n                            if(outputData.length > 1) throw(`Only one store supported: ${err_detail}`)\n                            let ev = ()=> {\n                                let value = el[input[i].trim()];\n                                \n                                if(processFunc) value = processFunc?.(value, el);\n                                let store = _store(outputData[0]?.name);\n                                \n                                if(value !== undefined) {\n                                    store?.update?.(curVal=> {\n                                        return outputData[0]?.path?.length ? _nestedValue(curVal, outputData[0]?.path, value) : value\n                                    });\n                                }\n                            }\n                            el.addEventListener(trigger, ev);\n                        }\n                    }   //End loop input\n                }   //End loop triggers\n            }); //End loop settings\n        }   //End loop dataset modes\n    };  //End loop elements\n}\n\n//Get or set nested store values\n/**\n * \n * @param {any} obj \n * @param {(string | number)[]} path \n * @param {any} [newval] \n * @returns \n */\nfunction _nestedValue(obj, path, newval) {\n    let ptr = obj;\n\n    for(let key of path) {\n        //Dynamically letruct object if it doesn't exist\n        if(ptr == undefined) ptr = typeof key == \"number\" ? [] : {};\n\n        //Set or get value\n        if(newval == undefined || path[path.length - 1] !== key) ptr = ptr instanceof Map ? ptr?.get(key) : ptr?.[key];\n        else ptr instanceof Map ? ptr.set(key, newval) : ptr[key] = newval;\n    }\n\n    return ptr;\n}\n\n/**\n * @param {string} str \n * @returns \n */\nfunction _paramsInParens(str) {\n    if(str?.includes(\"(\")) {\n        let matches = str.match(/[^\\(\\)]{1,}/g);\n        str = matches?.[matches.length - 1] || \"\";\n    }\n    return str?.split(_commaSepRx)?.map(s=> s.trim()) || [];\n}\n\n/**\n * @param {HTMLElement} el \n * @param {string} trigger \n */\nfunction _handleFetch(el, trigger) {\n    /**\n     * @param {Event} [e]\n     */\n    let ev = async e=> {  \n        e?.preventDefault();\n        e?.stopPropagation();  \n\n        let fetchOps = {\n            ..._ops,\n            ..._ops.profiles?.[el.dataset[\"overrides\"] || \"\"] || JSON.parse(el.dataset[\"overrides\"] || \"{}\") || {},\n        };\n\n        /** @type {any} */ let target = e?.target;\n        // if([\"click\", \"submit\"].includes(trigger) || [\"A\", \"FORM\"].includes(target?.nodeName)) {\n        //     history.pushState(\n        //         {fetchData, elId: el.id}, \n        //         \"\", \n        //         target?.href || target?.action || \"\"\n        //     );\n        // }\n    \n        //Make sure we're allowed to fetch\n        if(!fetchOps?.fetch?.externals?.some(allowed=> target?.href?.startsWith(allowed.domain))) {\n            //Fetch data\n            let fOps = fetchOps.fetch;\n            let data = await fetch(target?.href, {\n                ...(fOps?.request || {}),\n                method: target?.method,\n                body: fOps?.request?.body ? JSON.stringify(fOps?.request?.body || {}) : undefined,\n            })\n            .catch(error=> {\n                fOps?.err?.(error);\n            });\n\n            //Handle onCode callback\n            let code = data?.status;\n            if(code && fOps?.onCode?.(code) == false) return;\n\n            //Return JSON or text in callback\n            let resp = await data?.[fetchOps.fetch?.type || \"text\"]();\n            fetchOps.fetch?.cb?.(resp);\n\n            // Handle resolutions\n            let resolve = el.getAttribute(\"mf-resolve\");\n            if([\"$append\", \"$prepend\", \"$replace\"].includes(resolve || \"\")) {\n                //Extract content\n                let fullMarkup = globalThis.DOMParser ? new DOMParser()?.parseFromString?.(resp, 'text/html')?.body : resp;\n\n                // //Clear existing scripts/styles\n                // clearDynamicElements(parent, pageScripts, \"script\");\n                // clearDynamicElements(parent, pageStyles, \"style\");;\n\n                // //Get scripts and styles\n                // let seek: string[] = ops.allowScripts ? [\"scripts\"] : [];\n                // if(ops.allowStyles) seek.push(\"style\");\n                // if(seek.length) {\n                //     let globls: NodeListOf<HTMLScriptElement | HTMLStyleElement> = fullMarkup.querySelectorAll(seek.join(\",\"));\n                //     for(let el of globls) {\n                //         let isScript = el instanceof HTMLScriptElement;\n                //         let source = isScript ? pageScripts : pageStyles;\n\n                //         if(isScript ? ops.allowScripts : ops.allowStyles){\n                //             if(!source.has(parent)) source.set(parent, []);\n                //             source.get(parent)?.push(el as any);\n                //         }\n                //         else if(isScript) el.parentNode?.removeChild(el);\n                //     }\n                // }\n\n                // ops.replace.forEach(r => {\n                //     let [ extract, relation, replace ] = r.split(/\\s*(>|\\/|\\+)\\s*/);\n\n                //     // let outEl = [\"this\", \"self\"].includes(replace) ? parent : document.querySelector(replace);\n                // globalThis.document?.\n                // _scheduleUpdate({\n                //     in: /** @type {HTMLElement} */ (fullMarkup.querySelector(extract)),\n                //     out: /** @type {HTMLElement} */ ([\"this\", \"self\"].includes(replace) ? parent : document.querySelector(replace)),\n                //     relation, globalThis.document?.\n                //     ops,\n                //     done,\n                // })\n                // });\n            }\n            else if(resolve) {\n\n            }\n        }\n    }\n\n    if(trigger == \"mount\") ev();\n    else el.addEventListener(trigger, ev);\n}","import { _store } from \"./store.js\";\nimport { _addToNextTickQueue } from \"./updates.js\";\nimport { _registerSubs, _setOptions } from \"./registrar.js\";\n\n/**! @typedef {\"in-start\"|\"in-end\"|\"out-start\"|\"out-end\"} HookKey*/\n\n/**!\n * @typedef {object} ExternalOptions\n * @property {string} domain - The domain name these settings apply to\n * @property {boolean} [scripts] - Allow scripts from this domain to execute\n * @property {boolean} [styles] - Allow styles from this domain to apply\n */\n\n/**!\n * @typedef {object} FetchOptions\n * @property {RequestInit} [request] - Fetch request options\n * @property {\"json\"|\"text\"} [type] - Response type (default: \"text\")\n * @property {(val: any)=> void} [cb] - Callback function - run on successful fetch; *val* is the un-parsed response body\n * @property {(err: Error)=> void} [err] - Error callback - run on fetch error\n * @property {(code: number)=> boolean | void} [onCode] - Callback function - run on fetch response code; return `false` to prevent further processing\n * @property {boolean} [auto] - Automatically fetch content on page load\n * @property {ExternalOptions[]} [externals] - External domain fetch settings\n */\n\n/**!\n * @typedef {object} TransitionOptions\n * @property {string} [class] - CSS class applied to transitions (default: `mf-trans`)\n * @property {[number, number] | number} [dur] - Transition duration: [in, out] or single value (in ms); default: 300\n * @property {number} [swap] - Swap delay (in ms) - applied between one element's outro start and the replacement's intro start; default: 0\n * @property {{ [key in HookKey]?: (el: HTMLElement)=> void }} [hooks] - Transition hooks\n */\n\n/**!\n * Manifold options for `fetch`, `trans`, and `profiles`.\n * @typedef {Object} MfldOps\n * @property {{ [ key: string ]: Partial<MfldOps> }} [profiles] - Fetch profiles assignable to elements\n * @property {FetchOptions} [fetch] - Fetch options - see https://google.com\n * @property {TransitionOptions} [trans] - Transition settings - see https://google.com\n */\n\n/**!\n * @template T\n * @callback UpdaterFunction\n * @param {Array<any>} upstreamValues\n * @param {T} value\n * @returns {T | Promise<T>}\n */\n\n/**!\n * @template T\n * @typedef {Object} StoreOptions\n * @property {T} [value]\n * @property {Array<string>} [upstream]\n * @property {UpdaterFunction<T>} [updater]\n */\n\n/**!\n * @template T\n * @typedef Store\n * @prop {T} value - The store's current value (read only)\n * @prop {function(T | function(T):T|Promise<T>|undefined):T|Promise<T>|undefined} update - Update the store's current value\n * @prop {function(function(T):void,string):void} sub - Add a subscription function to the store\n */\n\n/**!\n * @typedef {Function} MfldFunc\n * @param {any} val\n * @param {HTMLElement} [el]\n */\n\n/**!\n * The global Manifold interface.\n */\nexport let Mfld = {\nstore: \n/**!\n* - Create or overwrite a _typed_ global Manifold store by passing `store_ops` (`MfldOps`) -> *returns `Store\\<T\\>`* \n* - Retrieve an untyped reference to the store specified by name by omitting `store_ops` -> *returns `Store\\<any\\>`*\n* @template T\n* @param {string} store_name\n* @param {StoreOptions<T> | T} store_ops\n* @return {Store<T>}\n*/ (store_name, store_ops)=> {\n    if(!store_ops?.hasOwnProperty(\"value\") && !store_ops?.hasOwnProperty(\"updater\")) {\n        store_ops = /** @type {StoreOptions<T>}*/({ value: /** @type {T}*/store_ops });\n    }\n    return /**@type {Store<T>}*/(_store(store_name, /**@type {StoreOptions<T>}*/store_ops))\n},\nustore: \n/**!\n* - Create or overwrite an untyped global Manifold store by passing `store_ops` (`MfldOps`) -> *returns `Store\\<any\\>`* \n* - Retrieve an untyped reference to the store specified by name by omitting `store_ops` -> *returns `Store\\<any\\>`*\n* @param {string} store_name\n* @param {StoreOptions<any> | any} store_ops\n* @return {Store<any>}\n*/ (store_name, store_ops)=> /**@type {Store<any>}*/(_store(store_name, store_ops)),\nget:\n/**!\n * - Retrieve a Manifold store by name. *returns `Store\\<any\\>`*\n * @param {string} store_name\n * @return {Store<any>}\n */ (store_name)=> /**@type {Store<any>}*/(_store(store_name)),\nfunc: \n/**!\n * - Retrieve a Manifold function by name. *val* refers to the store's current value; *el* refers to the element that triggered the update (if applicable). *returns `MfldFunc`*\n * - *Note:* Functions retrived using this method cannot infer the type of the store's value and is therefore **not** type-checked. It is preferable to keep a reference to the function if you need to preserve type information.\n * @param {string} func_name\n * @return {MfldFunc}\n */ (func_name)=> /** @type {(val: any, el?: HTMLElement)=> void}*/(\n// @ts-ignore\n MfFn?.get(func_name)),\nfuncs: \n/**!\n * - Add functions to the Manifold function registry in key-value pairs.\n * - Functions must be registered in order to be accessible to HTML elements via `mf-bind`, `mf-sync`, and `mf-resolve`. \n * - It may still be beneficial to keep a reference to the original function if you need to preserve type information.\n * @param {{ [key: string]: MfldFunc }} funcs\n */ funcs=> {for(let key in funcs) \n// @ts-ignore\n MfFn.set(key, funcs[key])},\nconfig:\n/**!\n * - Set Manifold configuration options, including `trans` (DOM transition settings), `fetch` (fetch options), and `profiles` (configuration option overrides that can be set on elements ad-hoc via `mf-overrides`).\n * - Providing the optional `profileName` parameter allows you to save the configuration as a named profile. Otherwise, the profile is saved as the default configuration.\n * @param {MfldOps} new_ops\n * @param {string} [profile_name]\n */ (new_ops, profile_name)=> _setOptions(new_ops, profile_name),\n onTick:\n /**!\n  * - Wait for the next Manifold data update cycle to complete before executing the callback function.\n  * @param {()=> void} cb\n  */ (cb)=> _addToNextTickQueue(cb),\nregister:\n/**!\n * - Register Manifold subscriptions on the DOM. *Optional:* Pass an `HTMLElement` or selector string to scope the registration to a specific element.\n * @param {HTMLElement | string | null} [parent]\n */ (parent)=> {\n    if(typeof parent == \"string\") parent = /** @type {HTMLElement | null}*/(document.querySelector(parent));\n        _registerSubs(parent)\n    },\n};"],"names":["smartOutro","globalThis","workArray","cancelAnimationFrame","_nextTickQueue","tick","requestAnimationFrame","fn","setTimeout","_scheduleUpdate","update","push","_runUpdates","dsStores","Set","storeName","_workOrder","S","_store","ref","sub","_subscriptions","value","_","downstream","MfSt","_upstreamStores","has","add","store","_updater","Array","from","map","clear","order","includes","relation","container","document","createElement","child","out","childNodes","appendChild","replaceChildren","_applyTransition","ops","space","in","adjust","after","done","forEach","el","dir","nodeType","Node","TEXT_NODE","text","textContent","newNode","replaceWith","dur","isArray","trans","transClass","class","classList","hooks","size","style","transitionDuration","remove","swap","_hashAny","input","Map","entries","hash","char","TextEncoder","encode","toString","MfFn","Store","undefined","_storedHash","constructor","name","this","_modify","set","upstream","updater","String","Date","now","Math","random","Promise","async","resolve","mayDeleteDownstream","keys","newValue","newHash","delete","found_store","get","DOMParser","_ops","ATTR_PREFIX","_modes","m","_commaSepRx","_elIdx","_nestedValue","obj","path","newval","ptr","key","length","_paramsInParens","str","matches","match","split","s","trim","_handleFetch","trigger","ev","e","preventDefault","stopPropagation","fetchOps","profiles","dataset","JSON","parse","target","fetch","externals","some","allowed","href","startsWith","domain","fOps","data","request","method","body","stringify","catch","error","err","code","status","onCode","resp","type","cb","getAttribute","parseFromString","addEventListener","Mfld","store_name","store_ops","hasOwnProperty","ustore","func","func_name","funcs","config","new_ops","profile_name","_setOptions","newops","profileName","onTick","register","parent","querySelector","els","querySelectorAll","join","auto","id","mode","shouldHaveTriggers","err_detail","setting","processFunc","_parts","triggers","splice","processFuncName","output","console","warn","outputData","ext","sourcePathArr","sp","isNaN","parseInt","filter","i","domSubscription","val","dispatchEvent","CustomEvent","curVal","_registerSubs"],"mappings":"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"}