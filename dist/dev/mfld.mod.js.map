{"version":3,"file":"mfld.mod.js","sources":["../../src/updates.js","../../src/store.js","../../src/http.js","../../src/registrar.js","../../src/index.module.js"],"sourcesContent":["/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\r\n\r\n/** @type {{ adjust?: Function, space?: Function, size?: Function } | undefined} */\r\nlet smartOutro = globalThis.smartOutro;\r\n\r\n/**\r\n * @typedef {Object} DomWorkOrder\r\n * @property {HTMLElement} in - The input HTMLElement\r\n * @property {HTMLElement} out - The output HTMLElement\r\n * @property {\"append\" | \"prepend\" | \"swapinner\" | \"swapouter\"} relation - The relation between the input and output elements\r\n * @property {Partial<MfldOps>} ops - The fetch options for the operation\r\n * @property {(el: HTMLElement | null) => void} done - The callback function to be executed when the operation is done\r\n */\r\n\r\n/** @type {(DomWorkOrder | Function)[]} */ let workArray = [];\r\nlet cancelAnimationFrame = false;\r\n/** @type {Map<string, (any | ((any)=> any))>} */\r\n\r\n// Next tick queue\r\n/**\r\n * @type {Function[]}\r\n */\r\nlet _nextTickQueue = [];\r\n\r\n// Polyfill requestAnimationFrame\r\nlet tick = globalThis?.requestAnimationFrame || ((fn)=> setTimeout(fn, 0));\r\n\r\n/** @type {Map<import(\"./index.module.js\").Store<any>, (any | ((any)=> any))>} */ export let _workOrder = new Map();\r\n\r\nexport function _addToNextTickQueue(fn) {\r\n    if(fn) _nextTickQueue.push(fn);\r\n}\r\n\r\n/** @export @param {(DomWorkOrder | Function)} update */\r\nexport function _scheduleUpdate(update) {\r\n    workArray.push(update);\r\n    if(!cancelAnimationFrame) {\r\n        cancelAnimationFrame = true;\r\n        tick(_runUpdates);\r\n    }\r\n}\r\n\r\nfunction _runUpdates() {\r\n    cancelAnimationFrame = false;\r\n\r\n    // Update stores and cascade downstream\r\n    for(let [S] of _workOrder) {\r\n        // @ts-ignore\r\n        for(let [ref, sub] of S?._subscriptions || []) sub?.(S.value, ref);\r\n    }\r\n\r\n    // Clear work order and update derived stores\r\n    _workOrder.clear();\r\n    \r\n    /**\r\n    * @type {DomWorkOrder[]}\r\n    */\r\n    for(let order of workArray) {\r\n        if(typeof order == \"function\") (/** @type {Function} */ order)();\r\n        else {\r\n            // Remove old children\r\n            if([\"swapinner\", \"append\"].includes(order.relation)) {\r\n                if(order.relation == \"swapinner\") {\r\n                    //Remove old children before appending\r\n                    let container = document?.createElement(\"div\");\r\n                    for(let child of Array.from(order.out?.childNodes || [])) {\r\n                        container.appendChild(child);\r\n                    }\r\n                    order.out?.replaceChildren(container);\r\n                    _applyTransition(container, \"out\", order.ops);\r\n                }\r\n\r\n                smartOutro?.space?.(order.in, order.out);\r\n\r\n                //Append\r\n                _applyTransition(order.in, \"in\", order.ops, ()=> {\r\n                    if(order.in) order.out?.appendChild(order.in);\r\n                    smartOutro?.adjust?.(order.in, order.ops);\r\n                });\r\n            }\r\n            //Prepend\r\n            else if(order.relation == \"prepend\") {\r\n                smartOutro?.space?.(order.in, order.out);\r\n\r\n                //Prepend\r\n                _applyTransition(order.in, \"in\", order.ops, ()=> {\r\n                    if(order.in) order.out?.prepend(order.in);\r\n                    smartOutro?.adjust?.(order.in, order.ops);\r\n                });\r\n            }\r\n            //Insert after old element before removing\r\n            else _applyTransition(order.in, \"in\", order.ops, ()=> {\r\n                order.out?.after(order.in);\r\n                smartOutro?.space?.(order.in, order.out);\r\n                smartOutro?.adjust?.(order.in, order.ops);\r\n\r\n                //Remove old element\r\n                if(order.relation == \"swapouter\") _applyTransition(order.out, \"out\", order.ops);\r\n            });\r\n\r\n            order.done?.(order.in);\r\n        }\r\n    }\r\n\r\n    //Handle queued nextTick functions\r\n    _nextTickQueue.forEach(fn=> fn());\r\n    _nextTickQueue = [];\r\n    workArray = [];\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el \r\n * @param {\"in\" | \"out\"} dir \r\n * @param {Partial<MfldOps>} ops \r\n * @param {Function} [fn] \r\n * @returns \r\n */\r\nfunction _applyTransition(el, dir, ops, fn) {\r\n    console.log(\"Applying transition\", el, dir, ops, fn)\r\n    //Handle text nodes\r\n    if(el?.nodeType == Node.TEXT_NODE) {\r\n        let text = el.textContent;\r\n        let newNode = document?.createElement(\"div\");\r\n        newNode.textContent = text;\r\n        el.replaceWith(newNode);\r\n        el = newNode;\r\n    }\r\n\r\n    if(el) {\r\n        let dur = Array.isArray(ops.trans?.dur) ? ops.trans?.dur[dir == \"in\" ? 0 : 1] || ops.trans?.dur[0] : ops.trans?.dur || 0;\r\n\r\n        //Initiate transition\r\n        let transClass = ops?.trans?.class || \"mf-trans\";\r\n        el?.classList?.add(transClass);\r\n        ops.trans?.hooks?.[`${dir}-start`]?.(el);\r\n\r\n        //Wait to apply class\r\n        if(dir == \"out\") {\r\n            _scheduleUpdate(()=> {\r\n                smartOutro?.size?.(el);\r\n                if(dur) el.style.transitionDuration = `${dur}ms`;\r\n                el.classList?.add(dir);\r\n            })\r\n        }\r\n        //If dir == in\r\n        else {\r\n            setTimeout(()=> {\r\n                _scheduleUpdate(()=> {\r\n                    if(dur) el.style.transitionDuration = `${dur}ms`;\r\n                    el?.classList?.add(dir);\r\n                    fn?.();\r\n\r\n                    //Remove transition class\r\n                    _scheduleUpdate(()=> {\r\n                        el?.classList?.remove(dir);\r\n                    });\r\n                });\r\n            }, ops.trans?.swap || 0);\r\n        }\r\n        \r\n        setTimeout(()=> {\r\n            _scheduleUpdate(()=> {\r\n                //Wrapup\r\n                if(dir == \"out\") el?.remove();\r\n                el?.classList?.remove(transClass);\r\n                el?.classList?.remove(dir);\r\n                ops.trans?.hooks?.[`${dir}-end`]?.(el);\r\n            });\r\n        }, \r\n        dur + (dir == \"in\" ? ops.trans?.swap || 0 : 0));\r\n    }\r\n}","/** \n * @template T\n * @typedef {import(\"./index.module.js\").UpdaterFunction<T>} UpdaterFunction \n */\n/** \n * @template T\n * @typedef {import(\"./index.module.js\").StoreOptions<T>} StoreOptions \n */\n\nimport { _scheduleUpdate, _workOrder } from \"./updates.js\";\n\n/**\n * @callback SubFunction\n * @param {any} value\n * @param {string} [ref]\n * @returns {void}\n */\n\n/**\n * @param {any} input \n * @returns {any}\n */\nfunction _hashAny(input) {\n    if(!input) return 0;\n    if(typeof input == 'number') return input;\n    if(input === true) return 1;\n\n    if(input instanceof Map) return _hashAny(Array.from(input.entries()));\n    else if(input instanceof Set) return _hashAny(Array.from(input));\n\n    let hash = 0;\n    for(let char of new TextEncoder().encode(\n        typeof input == 'string' ? input : input?.toString() || \"\"\n    )) \n        hash = ((hash << 5) - hash) + char;\n    return hash;\n}\n\n//Static\n/** @type {Map<string, Store<any>>} */ if(!globalThis.MfSt) globalThis.MfSt = new Map();\n/** @type {Map<string, Function>} */ if(!globalThis.MfFn) globalThis.MfFn = new Map();\n\n/**\n * @template T\n */\nexport class Store {\n    /** @type {UpdaterFunction<T> | undefined} */ _updater = undefined;\n    /** @type {Map<string, SubFunction>} */ _subscriptions = new Map();\n    /** @type {string | undefined} */ _storedHash = undefined;\n    /** @type {Set<Store<any>>} */ _upstreamStores;\n    /** @type {Set<Store<any>>} */ _downstreamStores = new Set();\n\n    /**\n     * @param {string} name\n     * @param {StoreOptions<T>} [ops]\n     */\n    constructor(name, ops) {\n        return this._modify(name, ops);        \n    }\n\n    /**\n     * @param {string} name\n     * @param {StoreOptions<T>} [ops]\n     */\n    _modify(name, ops) {\n        this.name = name;\n        // @ts-ignore\n        MfSt.set(name, this);\n        \n        this._upstreamStores = new Set(ops?.upstream?.map(s=> _store(s)) || []);\n        this._upstreamStores.forEach(s=> s?._downstreamStores?.add(this));\n        this.value = ops?.value;\n        this._updater = ops?.updater;\n\n        return this;\n    }\n\n    /**\n     * @param {(T)=> void} sub\n     * @param {string | undefined} ref\n     */\n    sub(sub, ref) {\n        this._subscriptions.set(ref || String(Date.now() + Math.random()), sub);\n        sub?.(this.value);\n    }\n\n    //Update (manual or automated -- cascades downstream on batch updates)\n    /**\n    * @template T\n    * @param {T | ((T)=> T | Promise<T>)} value\n    */\n    async update(value) {\n        return new Promise(async (resolve)=> {\n            //Apply new value   \n            let newValue = (typeof value == \"function\" ? /** @type {Function} */(await value)?.(this.value) : value);\n            let newHash = _hashAny(newValue);\n            if(newHash !== this._storedHash) {\n                this.value = newValue;\n                this._storedHash = newHash;\n\n                // Add this store to the work order\n                _workOrder.set(this, await value);\n                for(let ds of this._downstreamStores) _workOrder.set(ds, await ds._auto_update());\n\n                // Wait for next animation frame to return the value\n                _scheduleUpdate(()=> {\n                    resolve(this.value);\n                });\n            }\n            else resolve(this.value);\n        });\n    }\n\n    async _auto_update() {\n        await this.update(\n            await this._updater?.(\n                Array.from(this._upstreamStores)?.map(S => S?.value) || [], \n                /** @type {T} */(this?.value)\n            ) || this.value,\n        )\n    }\n}\n\n/**\n * STORE STATIC METHODS\n */\n/**\n * @template T\n * @param {string} name - The name of the store\n * @param {StoreOptions<T> | T} [ops] - Options to update the store\n * @returns {Store<T>}\n */\nexport function _store(name, ops) {\n    // @ts-ignore\n    let found_store = MfSt.get(name);\n    if(ops) {\n        if(found_store) {\n            return found_store._modify(name, ops);\n        }\n        return new Store(name, ops);\n    }\n    return found_store || new Store(name, /** @type {StoreOptions<T>}*/(ops));\n}","import { _scheduleUpdate } from \"./updates.js\";\r\n\r\n//Track scripts and styles\r\nlet pageScripts = new WeakMap();\r\nlet pageStyles = new WeakMap();\r\nlet parser = globalThis.DOMParser ? new DOMParser() : undefined;\r\n\r\n/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\r\n\r\n//Fetch page and replace content\r\n/**\r\n * \r\n * @param {MfldOps} ops \r\n * @param {{method: string, href: string, el: HTMLElement}} target\r\n * @param {(el: HTMLElement | null)=> void} done \r\n * @returns \r\n */\r\nexport async function _fetchHttp(target, ops, done) {\r\n    if(!parser) return;\r\n    \r\n    //Make sure we're allowed to fetch\r\n    if(!ops.fetch?.externals?.some(allowed=> target?.href?.startsWith(allowed.domain))) {\r\n        //Fetch data\r\n        let fOps = ops.fetch;\r\n        let data = await fetch(target?.href, {\r\n            ...(fOps?.request || {}),\r\n            method: target?.method,\r\n            body: fOps?.request?.body ? JSON.stringify(fOps?.request?.body || {}) : undefined,\r\n        })\r\n        .catch(error=> {\r\n            fOps?.err?.(error);\r\n        });\r\n\r\n        //Handle onCode callback\r\n        let code = data?.status;\r\n        if(code && fOps?.onCode?.(code) == false) return;\r\n\r\n        //Return JSON or text in callback\r\n        let text = await data?.[ops.fetch?.type || \"text\"]();\r\n        ops.fetch?.cb?.(text);\r\n\r\n        if((ops?.fetch?.type) != \"json\") {\r\n            //Extract content\r\n            let fullMarkup = parser.parseFromString(text, 'text/html').body;\r\n        \r\n            // //Clear existing scripts/styles\r\n            // clearDynamicElements(parent, pageScripts, \"script\");\r\n            // clearDynamicElements(parent, pageStyles, \"style\");;\r\n\r\n            // //Get scripts and styles\r\n            // let seek: string[] = ops.allowScripts ? [\"scripts\"] : [];\r\n            // if(ops.allowStyles) seek.push(\"style\");\r\n            // if(seek.length) {\r\n            //     let globls: NodeListOf<HTMLScriptElement | HTMLStyleElement> = fullMarkup.querySelectorAll(seek.join(\",\"));\r\n            //     for(let el of globls) {\r\n            //         let isScript = el instanceof HTMLScriptElement;\r\n            //         let source = isScript ? pageScripts : pageStyles;\r\n\r\n            //         if(isScript ? ops.allowScripts : ops.allowStyles){\r\n            //             if(!source.has(parent)) source.set(parent, []);\r\n            //             source.get(parent)?.push(el as any);\r\n            //         }\r\n            //         else if(isScript) el.parentNode?.removeChild(el);\r\n            //     }\r\n            // }\r\n\r\n            // ops.replace.forEach(r => {\r\n            //     let [ extract, relation, replace ] = r.split(/\\s*(>|\\/|\\+)\\s*/);\r\n\r\n            //     // let outEl = [\"this\", \"self\"].includes(replace) ? parent : document.querySelector(replace);\r\n// globalThis.document?.\r\n            //     _scheduleUpdate({\r\n            //         in: /** @type {HTMLElement} */ (fullMarkup.querySelector(extract)),\r\n            //         out: /** @type {HTMLElement} */ ([\"this\", \"self\"].includes(replace) ? parent : document.querySelector(replace)),\r\n            //         relation,globalThis.document?.\r\n            //         ops,\r\n            //         done,\r\n            //     })\r\n            // });\r\n        }\r\n    }\r\n}\r\n\r\n// //Clear dynamic elements\r\n// function clearDynamicElements(parent: HTMLElement, map: WeakMap<HTMLElement, any[]>, type: string) {\r\n//     let elements = map.get(parent) || [];\r\n//     elements.forEach(el => el.remove());\r\n//     map.set(parent, []);\r\n// }","import { _store } from \"./store.js\";\nimport { _fetchHttp } from \"./http.js\";\nimport { _scheduleUpdate } from \"./updates.js\";\n/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\n\n/** @type {Partial<MfldOps>} */\nlet _ops = {};\n\nlet ATTR_PREFIX = \"mf\";\n\nlet _commaSepRx = /, {0,}/g;\nlet _elIdx = 0;\nlet pageScripts = new WeakMap();\nlet pageStyles = new WeakMap();\n\n// globalThis.addEventListener(\"popstate\", (e)=> {\n//     let el = document?.getElementById(e.state?.elId);\n//     if(e?.state?.fetchData) {\n//         _fetchHttp(\n//             \"get\", \n//             \"\",\n//             e.state.fetchData,\n//             el,\n//             el=> {if(el) _registerSubs(el)}\n//         );\n//     }\n// });\n\n/**!\n * @param {Partial<MfldOps>} newops \n * @param {string} [profileName] \n */\nexport function _setOptions(newops, profileName) {\n    if(profileName) _ops.profiles = { ..._ops.profiles, [profileName]: newops };\n    else _ops = { ..._ops, ...newops };\n}\n\n//Register subscriptions on the DOM (scopable in case an update needs run on a subset of the DOM)\n/**\n * @param {HTMLElement | null} [parent] \n */\nexport function _registerSubs(parent) {   \n    /** @type {NodeListOf<HTMLElement> | []} */\n    let els = (parent || document.body).querySelectorAll(\n        `[data-${ATTR_PREFIX}${[\"bind\", \"sync\", \"get\", \"head\", \"post\", \"put\", \"delete\", \"patch\"].join(`],[data-${ATTR_PREFIX}`)}]${_ops.fetch?.auto != false ? \",a\" : \"\"}`\n    ) || [];\n\n    for(let el of els) {\n        /** @type {HTMLElement} */\n        if(!el.id) el.id = `${_elIdx++}`;\n\n        //Loop over all data attributes (modes)\n        for(let mode in el.dataset) {\n            let shouldHaveTriggers = mode != `${ATTR_PREFIX}bind`;\n            let err_detail = `(#${el.id} on ${mode})`;\n\n            //Loop over provided settings\n            el.dataset?.[mode]?.split(\";\").forEach(setting=> {\n                //Break out settings\n                let _parts = setting?.split(/(?:(?:\\)|->) ?){1,}/g) || []; \n        \n                //Extract settings\n                let triggers = shouldHaveTriggers ? _paramsInParens(_parts.splice(0,1)[0]) : [];\n                let processFuncName = _parts[0]?.includes(\"(\") ? _parts[0]?.match(/^[^\\(]{1,}/)?.[0] || \"\" : \"\";\n                let output = _paramsInParens(_parts.splice(mode == `${ATTR_PREFIX}sync` ? 1 : 0, 1)[0]);\n                let input = _paramsInParens(_parts[0]);\n\n                //Handle errors\n                if(shouldHaveTriggers && !triggers?.length) throw(`No trigger: ${err_detail}.`)\n\n                /** @type {Function | undefined} */\n                let processFunc;\n                if(processFuncName) {\n                    // @ts-ignore\n                    processFunc = globalThis[processFuncName] || MfFn?.get(processFuncName);\n                    if(!processFunc) console.warn(`\"${processFuncName}\" not registered: ${err_detail}`);\n                    if(((!shouldHaveTriggers && output.length > 1) || (shouldHaveTriggers && input.length > 1))) throw(`Multiple sources: ${err_detail}`);\n                }\n\n                //Map output names and paths\n                let outputData = output.map((ext)=> {\n                    let [ name, ...sourcePathArr ] = ext.split(/[\\.\\[\\]\\?]{1,}/g);\n                    return {\n                        name,\n                        path: sourcePathArr.map(sp=> !isNaN(parseInt(sp)) \n                            ? parseInt(sp) \n                            : sp)\n                            .filter(sp=> sp) /** @type {(string | number)[]} */\n                    }\n                });\n\n                //Loop over triggers\n                if(!triggers?.length) triggers = [\"\"]\n                for(let trigger of triggers) {\n                    /**\n                     * HANDLE MF-FETCH\n                     */\n                    //No input loops for fetch\n                    if(!mode.match(/bind|sync/)) {\n                        if(input.length > 1 || output.length > 1) throw(`Multiple sources: ${err_detail}`);\n                        _handleFetch(el, trigger, mode.replace(ATTR_PREFIX, \"\"), input[0], output[0]);\n                        return;\n                    }\n\n                    //Loop over input\n                    if(!input?.length) input = [ \"\" ];\n                    for(let i=0; i < input.length; i++) {\n                        /**\n                         * HANDLE MF-BIND\n                         */\n                        if(mode == `${ATTR_PREFIX}bind`) {\n                            let domSubscription = ()=> {\n                                _scheduleUpdate(()=> {\n                                    let val = processFunc?.(\n                                        ...outputData.map(\n                                            s=> _nestedValue(_store(s.name)?.value, s.path)\n                                        ), el\n                                    ) ??\n                                    _nestedValue(\n                                        _store(outputData[0].name || \"\")?.value, outputData[0].path\n                                    );\n\n                                    if(val !== undefined) el[input[i]] = val;\n\n                                    //Make sure to update dependent stores on value update\n                                    el.dispatchEvent(new CustomEvent(trigger))\n                                });\n                            }\n                        \n                            //Add subscription - run whenever store updates\n                            for(let store of outputData) _store(store.name)?.sub(domSubscription, el.id);\n                        }\n\n                        /**\n                         * HANDLE MF-SYNC\n                         */\n                        else if(mode == `${ATTR_PREFIX}sync`) {\n                            if(outputData.length > 1) throw(`Only one store supported: ${err_detail}`)\n                            let ev = ()=> {\n                                let prop = input[i].trim();\n                                let value = el[prop] ?? el.getAttribute(prop) ?? el.dataset[prop] ?? undefined;\n                                \n                                if(processFunc) value = processFunc?.(value, el);\n                                let store = _store(outputData[0]?.name);\n                                \n                                if(value !== undefined) {\n                                    store?.update?.(curVal=> {\n                                        return outputData[0]?.path?.length ? _nestedValue(curVal, outputData[0]?.path, value) : value\n                                    });\n                                }\n                            }\n                            if(trigger == \"$mount\") ev();\n                            else el.addEventListener(trigger, ev);\n                        }\n                    }   //End loop input\n                }   //End loop triggers\n            }); //End loop settings\n        }   //End loop dataset modes\n    };  //End loop elements\n}\n\n//Get or set nested store values\n/**\n * \n * @param {any} obj \n * @param {(string | number)[]} path \n * @param {any} [newval] \n * @returns \n */\nfunction _nestedValue(obj, path, newval) {\n    let ptr = obj;\n\n    for(let key of path) {\n        //Dynamically letruct object if it doesn't exist\n        if(ptr == undefined) ptr = typeof key == \"number\" ? [] : {};\n\n        //Set or get value\n        if(newval == undefined || path[path.length - 1] !== key) ptr = ptr instanceof Map ? ptr?.get(key) : ptr?.[key];\n        else ptr instanceof Map ? ptr.set(key, newval) : ptr[key] = newval;\n    }\n\n    return ptr;\n}\n\n/**\n * @param {string} str \n * @returns \n */\nfunction _paramsInParens(str) {\n    if(str?.includes(\"(\")) {\n        let matches = str.match(/[^\\(\\)]{1,}/g);\n        str = matches?.[matches.length - 1] || \"\";\n    }\n    return str?.split(_commaSepRx)?.map(s=> s.trim()) || [];\n}\n\n/**\n * @param {HTMLElement} el \n * @param {string} trigger \n * @param {string} [method] \n * @param {BodyInit | null} [input]\n * @param {string} [href]\n */\nfunction _handleFetch(el, trigger, method, input, href) {\n    /**\n     * @param {Event} [e]\n     */\n    let ev = async e=> {  \n        e?.preventDefault();\n        e?.stopPropagation();\n\n        let overrides = el.dataset[`${ATTR_PREFIX}overrides`] || \"{}\";\n        let overrideOps = _ops.profiles?.[overrides]?.fetch || JSON.parse(overrides);\n\n        /** @type {MfldOps} */\n        let fetchOps = overrideOps ? {\n            ..._ops,\n            ...overrideOps,\n        } : _ops;\n\n        // If no input data was provided, it's the href; use fetchOps.body if it exists (input overrides this)\n        if(!href) {\n            href = typeof input == \"string\" ? structuredClone(input) : null || /** @type {string} */(/** @type {any}*/(e?.target)?.href);\n            input = fetchOps?.fetch?.request?.body;\n        }\n\n        // Set from target element if relevant; fall back to \"get\"\n        if(!method) method = /** @type {any}*/(e?.target)?.method || \"get\";\n\n        // if([\"click\", \"submit\"].includes(trigger) || [\"A\", \"FORM\"].includes(target?.nodeName)) {\n        //     history.pushState(\n        //         {fetchData, elId: el.id}, \n        //         \"\", \n        //         target?.href || target?.action || \"\"\n        //     );\n        // }\n    \n        //Make sure we're allowed to fetch\n        let externalPermissions = fetchOps?.fetch?.externals?.find(allowed=> href?.startsWith(allowed.domain)) || \n            !href.match(/^https?:\\/\\//) || href.includes(location.origin) ? {\n                scripts: true,\n                styles: true,\n        } : undefined;\n\n        //Fetch data\n        let data = await fetch(href, {\n            ...(fetchOps?.fetch?.request || {}),\n            method,\n            body: typeof input == \"string\" ? input : JSON.stringify(input),\n        })\n        .catch(error=> {\n            fetchOps?.fetch?.err?.(error);\n        });\n\n        //Handle onCode callback\n        let code = data?.status;\n        if(code && fetchOps?.fetch?.onCode?.(code, data) == false) return;\n\n        //Return JSON or text in callback\n        let resp = await data?.[fetchOps?.fetch?.type || \"text\"]();\n        fetchOps?.fetch?.cb?.(resp);\n\n        // Handle resolutions\n        for(let instruction of [\"append\", \"prepend\", \"swapinner\", \"swapouter\"]) {\n            let [selector, toReplace] = el.dataset[`${ATTR_PREFIX}${instruction}`]?.split(\"->\").map(s=> s.trim()) || [];\n\n            //Extract content and schedule a DOM update\n            let fullMarkup = (new DOMParser())?.parseFromString?.(resp, 'text/html');\n            if(fullMarkup) {\n                _scheduleUpdate({\n                    in: /** @type {HTMLElement} */ (fullMarkup.querySelector(selector || \"body\")),\n                    out: /** @type {HTMLElement} */ (toReplace ? document.querySelector(toReplace) : el),\n                    relation: /** @type {\"append\" | \"prepend\" | \"swapinner\" | \"swapouter\"}*/(instruction),\n                    ops: fetchOps,\n                    done: ()=> true,\n                })\n            }\n        }\n\n        if(el.dataset?.[`${ATTR_PREFIX}resolve`]) {\n            alert(\"RESOLVING\")\n        }\n\n            // //Clear existing scripts/styles\n            // for(let s of [pageScripts, pageStyles]) {\n            //     let elements = s.get(fullMarkup) || [];\n            //     elements.forEach(el => el.remove());\n            //     s.set(fullMarkup, []);\n            // }\n\n            // //Get scripts and styles\n            // let seek: string[] = ops.allowScripts ? [\"scripts\"] : [];\n            // if(ops.allowStyles) seek.push(\"style\");\n            // if(seek.length) {\n            //     let globls: NodeListOf<HTMLScriptElement | HTMLStyleElement> = fullMarkup.querySelectorAll(seek.join(\",\"));\n            //     for(let el of globls) {\n            //         let isScript = el instanceof HTMLScriptElement;\n            //         let source = isScript ? pageScripts : pageStyles;\n\n            //         if(isScript ? ops.allowScripts : ops.allowStyles){\n            //             if(!source.has(parent)) source.set(parent, []);\n            //             source.get(parent)?.push(el as any);\n            //         }\n            //         else if(isScript) el.parentNode?.removeChild(el);\n            //     }\n            // }\n    }\n\n    if(trigger == \"$mount\") ev();\n    else el.addEventListener(trigger, ev);\n}","import { _store } from \"./store.js\";\nimport { _addToNextTickQueue } from \"./updates.js\";\nimport { _registerSubs, _setOptions } from \"./registrar.js\";\n\n/**! @typedef {\"in-start\"|\"in-end\"|\"out-start\"|\"out-end\"} HookKey*/\n\n/**!\n * @typedef {object} ExternalOptions\n * @property {string} domain - The domain name these settings apply to\n * @property {boolean} [scripts] - Allow scripts from this domain to execute\n * @property {boolean} [styles] - Allow styles from this domain to apply\n */\n\n/**!\n * @typedef {object} FetchOptions\n * @property {RequestInit} [request] - Fetch request options\n * @property {\"json\"|\"text\"} [type] - Response type (default: \"text\")\n * @property {(val: any)=> void} [cb] - Callback function - run on successful fetch; *val* is the un-parsed response body\n * @property {(err: Error)=> void} [err] - Error callback - run on fetch error\n * @property {(code: number, data: void | Response)=> boolean | void} [onCode] - Callback function - run on fetch response code; return `false` to prevent further processing\n * @property {boolean} [auto] - Automatically fetch content on page load\n * @property {ExternalOptions[]} [externals] - External domain fetch settings\n */\n\n/**!\n * @typedef {object} TransitionOptions\n * @property {string} [class] - CSS class applied to transitions (default: `mfTrans`)\n * @property {[number, number] | number} [dur] - Transition duration: [in, out] or single value (in ms); default: 300\n * @property {number} [swap] - Swap delay (in ms) - applied between one element's outro start and the replacement's intro start; default: 0\n * @property {{ [key in HookKey]?: (el: HTMLElement)=> void }} [hooks] - Transition hooks\n */\n\n/**!\n * Manifold options for `fetch`, `trans`, and `profiles`.\n * @typedef {Object} MfldOps\n * @property {{ [ key: string ]: Partial<MfldOps> }} [profiles] - Fetch profiles assignable to elements\n * @property {FetchOptions} [fetch] - Fetch options - see https://google.com\n * @property {TransitionOptions} [trans] - Transition settings - see https://google.com\n */\n\n/**!\n * @template T\n * @callback UpdaterFunction\n * @param {Array<any>} upstreamValues\n * @param {T} value\n * @returns {T | Promise<T>}\n */\n\n/**!\n * @template T\n * @typedef {Object} StoreOptions\n * @property {T} [value]\n * @property {Array<string>} [upstream]\n * @property {UpdaterFunction<T>} [updater]\n */\n\n/**!\n * @template T\n * @typedef Store\n * @prop {T} value - The store's current value (read only)\n * @prop {function(T | function(T):T|Promise<T>|undefined):T|Promise<T>|undefined} update - Update the store's current value\n * @prop {function(function(T):void,string):void} sub - Add a subscription function to the store\n */\n\n/**!\n * @typedef {Function} MfldFunc\n * @param {any} val\n * @param {HTMLElement} [el]\n */\n\n/**!\n * The global Manifold interface.\n */\nexport let Mfld = {\nstore: \n/**!\n* - Create or overwrite a _typed_ global Manifold store by passing `store_ops` (`MfldOps`) -> *returns `Store\\<T\\>`* \n* - Retrieve an untyped reference to the store specified by name by omitting `store_ops` -> *returns `Store\\<any\\>`*\n* @template T\n* @param {string} store_name\n* @param {StoreOptions<T> | T} store_ops\n* @return {Store<T>}\n*/ (store_name, store_ops)=> {\n    if(!store_ops?.hasOwnProperty(\"value\") && !store_ops?.hasOwnProperty(\"updater\")) {\n        store_ops = /** @type {StoreOptions<T>}*/({ value: /** @type {T}*/store_ops });\n    }\n    return /**@type {Store<T>}*/(_store(store_name, /**@type {StoreOptions<T>}*/store_ops))\n},\nustore: \n/**!\n* - Create or overwrite an untyped global Manifold store by passing `store_ops` (`MfldOps`) -> *returns `Store\\<any\\>`* \n* - Retrieve an untyped reference to the store specified by name by omitting `store_ops` -> *returns `Store\\<any\\>`*\n* @param {string} store_name\n* @param {StoreOptions<any> | any} store_ops\n* @return {Store<any>}\n*/ (store_name, store_ops)=> /**@type {Store<any>}*/(_store(store_name, store_ops)),\nget:\n/**!\n * - Retrieve a Manifold store by name. *returns `Store\\<any\\>`*\n * @param {string} store_name\n * @return {Store<any>}\n */ (store_name)=> /**@type {Store<any>}*/(_store(store_name)),\nfunc: \n/**!\n * - Retrieve a Manifold function by name. *val* refers to the store's current value; *el* refers to the element that triggered the update (if applicable). *returns `MfldFunc`*\n * - *Note:* Functions retrived using this method cannot infer the type of the store's value and is therefore **not** type-checked. It is preferable to keep a reference to the function if you need to preserve type information.\n * @param {string} func_name\n * @return {MfldFunc}\n */ (func_name)=> /** @type {(val: any, el?: HTMLElement)=> void}*/(\n// @ts-ignore\n MfFn?.get(func_name)),\nfuncs: \n/**!\n * - Add functions to the Manifold function registry in key-value pairs.\n * - Functions must be registered in order to be accessible to HTML elements via `mfBind`, `mfSync`, and `mfResolve`. \n * - It may still be beneficial to keep a reference to the original function if you need to preserve type information.\n * @param {{ [key: string]: MfldFunc }} funcs\n */ funcs=> {for(let key in funcs) \n// @ts-ignore\n MfFn.set(key, funcs[key])},\nconfig:\n/**!\n * - Set Manifold configuration options, including `trans` (DOM transition settings), `fetch` (fetch options), and `profiles` (configuration option overrides that can be set on elements ad-hoc via `mfOverrides`).\n * - Providing the optional `profileName` parameter allows you to save the configuration as a named profile. Otherwise, the profile is saved as the default configuration.\n * @param {MfldOps} new_ops\n * @param {string} [profile_name]\n */ (new_ops, profile_name)=> _setOptions(new_ops, profile_name),\n onTick:\n /**!\n  * - Wait for the next Manifold data update cycle to complete before executing the callback function.\n  * @param {()=> void} cb\n  */ (cb)=> _addToNextTickQueue(cb),\nregister:\n/**!\n * - Register Manifold subscriptions on the DOM. *Optional:* Pass an `HTMLElement` or selector string to scope the registration to a specific element.\n * @param {HTMLElement | string | null} [parent]\n */ (parent)=> {\n    if(typeof parent == \"string\") parent = /** @type {HTMLElement | null}*/(document.querySelector(parent));\n        _registerSubs(parent)\n    },\n};"],"names":["smartOutro","globalThis","workArray","cancelAnimationFrame","_nextTickQueue","tick","requestAnimationFrame","fn","setTimeout","_workOrder","Map","_scheduleUpdate","update","push","_runUpdates","S","ref","sub","_subscriptions","value","clear","order","includes","relation","container","document","createElement","child","Array","from","out","childNodes","appendChild","replaceChildren","_applyTransition","ops","space","in","adjust","prepend","after","done","forEach","el","dir","console","log","nodeType","Node","TEXT_NODE","text","textContent","newNode","replaceWith","dur","isArray","trans","transClass","class","classList","add","hooks","size","style","transitionDuration","remove","swap","_hashAny","input","entries","Set","hash","char","TextEncoder","encode","toString","MfSt","MfFn","Store","_updater","undefined","_storedHash","_upstreamStores","_downstreamStores","constructor","name","this","_modify","set","upstream","map","s","_store","updater","String","Date","now","Math","random","Promise","async","resolve","newValue","newHash","ds","_auto_update","found_store","get","DOMParser","_ops","ATTR_PREFIX","_commaSepRx","_elIdx","_nestedValue","obj","path","newval","ptr","key","length","_paramsInParens","str","matches","match","split","trim","_handleFetch","trigger","method","href","ev","e","preventDefault","stopPropagation","overrides","dataset","overrideOps","profiles","fetch","JSON","parse","fetchOps","structuredClone","target","request","body","externals","find","allowed","startsWith","domain","location","origin","data","stringify","catch","error","err","code","status","onCode","resp","type","cb","instruction","selector","toReplace","fullMarkup","parseFromString","querySelector","alert","addEventListener","Mfld","store","store_name","store_ops","hasOwnProperty","ustore","func","func_name","funcs","config","new_ops","profile_name","_setOptions","newops","profileName","onTick","register","parent","els","querySelectorAll","join","auto","id","mode","shouldHaveTriggers","err_detail","setting","processFunc","_parts","triggers","splice","processFuncName","output","warn","outputData","ext","sourcePathArr","sp","isNaN","parseInt","filter","replace","i","domSubscription","val","dispatchEvent","CustomEvent","prop","getAttribute","curVal","_registerSubs"],"mappings":"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"}