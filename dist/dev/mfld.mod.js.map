{"version":3,"file":"mfld.mod.js","sources":["../../src/util.js","../../src/updates.js","../../src/store.js","../../src/fetch.js","../../src/bindsync.js","../../src/conditionals.js","../../src/registrar.js","../../src/index.module.js"],"sourcesContent":["export let ATTR_PREFIX = \"mf_\";\r\nexport let _inputNestSplitRx = /[\\.\\[\\]\\?]{1,}/g;\r\n\r\n/**\r\n * Get or set nested store values\r\n * @param {any} obj \r\n * @param {(string | number)[]} path \r\n * @param {any} [newval] \r\n * @returns \r\n */\r\nexport function _nestedValue(obj, path, newval) {\r\n    let ptr = obj;\r\n\r\n    for(let key of path) {\r\n        //Dynamically letruct object if it doesn't exist\r\n        if(ptr == undefined) ptr = typeof key == \"number\" ? [] : {};\r\n\r\n        //Set or get value\r\n        if(newval == undefined || path[path.length - 1] !== key) ptr = ptr instanceof Map ? ptr?.get(key) : ptr?.[key];\r\n        else ptr instanceof Map ? ptr.set(key, newval) : ptr[key] = newval;\r\n    }\r\n\r\n    return ptr;\r\n}\r\n\r\nexport function _getStorePathFromKey(s) {\r\n    let [storeName, ...path] = (s)?.split(_inputNestSplitRx);\r\n    return [storeName, path?.map(sp=> !isNaN(parseInt(sp)) ? parseInt(sp) : sp).filter(sp=> sp) || []];\r\n}\r\n\r\nfunction _getOverride(name, el, ops, parse = true, def = \"{}\", as) {\r\n    let override = el.dataset[`${ATTR_PREFIX}${name}`];\r\n    if(!override) return undefined;\r\n    if(name == \"overrides\") return ops.profiles?.[override || \"\"]?.fetch || JSON.parse(override || \"{}\");\r\n    if(parse) return JSON.parse(override || def);\r\n    if(as == \"num\") return parseInt(override) || undefined;\r\n    if(as == \"bool\") return override == \"true\" ? true : override == \"false\" ? false : undefined;\r\n    return override;\r\n}\r\n\r\n/**\r\n * Get or set nested store values\r\n * @param {import(\"./index.module\").MfldOps} ops\r\n * @param {HTMLElement} el\r\n * @returns {import(\"./index.module\").MfldOps}\r\n */\r\nexport function _getOpOverrides(ops, el) {\r\n    let overrides = _getOverride(\"overrides\", el, ops);\r\n\r\n    let newops = {\r\n        profiles: ops.profiles,\r\n        fetch: {\r\n            ...ops.fetch,\r\n            ...{\r\n                responseType: _getOverride(\"responsetype\", el, ops, false) || ops.fetch?.responseType\r\n            },\r\n            ...(overrides?.fetch || {}),\r\n            ...(_getOverride(\"fetch\", el, ops) || {}),\r\n        },\r\n        trans: {\r\n            ...ops.trans,\r\n            ...{\r\n                dur: _getOverride(\"transdur\", el, ops, true, \"[]\", \"num\") || ops.trans?.dur,\r\n                swap: _getOverride(\"transswap\", el, ops, false, \"\", \"num\") || ops.trans?.swap,\r\n                class: _getOverride(\"transclass\", el, ops, false) || ops.trans?.class,\r\n                smartTransition: _getOverride(\"transsmart\", el, ops, false, undefined, \"bool\") || ops.trans?.smartTransition,\r\n            },\r\n            ...(overrides?.trans || {}),\r\n            ...(_getOverride(\"trans\", el, ops) || {}),\r\n        },\r\n    }\r\n\r\n    return newops;\r\n}\r\n\r\n/**\r\n * @param {{el: HTMLElement, datakey: string} | string} data \r\n * @returns {{ storeList?: string[], func?: Function, storeName?: string}}\r\n */\r\nexport function _parseFunction(data) {\r\n    let condition = \"\";\r\n    let storeName = \"\";\r\n    if(typeof data === \"string\") {\r\n        condition = data;\r\n        storeName = data;\r\n    }\r\n    else {\r\n        condition = data?.el?.dataset?.[data?.datakey] || \"\";\r\n        storeName = condition;\r\n\r\n        if(!condition && data?.el?.dataset?.[`${ATTR_PREFIX}else`] !== undefined) {\r\n            condition = \"return true\";\r\n            storeName = `ELSE:${data?.el?.dataset?.[data?.datakey] || \"\"}`;\r\n        }\r\n    }\r\n\r\n    if(!condition) return {};\r\n\r\n    let [stores, fn] = condition?.split(\"=>\")?.map(s=> s.trim()) || [\"\", \"\"];\r\n    if(!fn) {\r\n        fn = stores.slice();\r\n        stores = \"\";\r\n    }\r\n\r\n    // Set up function to evaluate store values\r\n    let storeList = stores?.split(\",\")?.map(s=> s.replace(/[()]/g, \"\").trim());\r\n    // @ts-ignore\r\n    let func = globalThis[fn] || MfFn?.get(fn);\r\n\r\n    // If function is not found, try to create it; account for implicit returns\r\n    if(!func) {\r\n        if(!fn.match(/^\\s{0,}\\{/) && !fn.includes(\"return\")) fn = fn.replace(/^\\s{0,}/, \"return \");\r\n        func = new Function(...storeList, fn);\r\n    }\r\n\r\n    return { storeList, func, storeName };\r\n}","/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\r\n\r\nimport { ATTR_PREFIX } from \"./util.js\";\r\n\r\n/**\r\n * @typedef {Object} DomWorkOrder\r\n * @property {HTMLElement} in - The input HTMLElement\r\n * @property {HTMLElement} out - The output HTMLElement\r\n * @property {\"append\" | \"prepend\" | \"swapinner\" | \"swapouter\"} relation - The relation between the input and output elements\r\n * @property {Partial<MfldOps>} ops - The fetch options for the operation\r\n * @property {(el: HTMLElement | null) => void} done - The callback function to be executed when the operation is done\r\n */\r\n\r\n/** @type {(DomWorkOrder | Function)[]} */ let workArray = [];\r\nlet cancelAnimationFrame = false;\r\n/** @type {Map<string, (any | ((any)=> any))>} */\r\n\r\n// Next tick queue\r\n/**\r\n * @type {Function[]}\r\n */\r\nlet _nextTickQueue = [];\r\n\r\n/** @type {HTMLElement | null} */\r\nlet spacer;\r\nlet spacerHeight = \"\";\r\n\r\n// Polyfill requestAnimationFrame\r\nlet tick = globalThis?.requestAnimationFrame || ((fn)=> setTimeout(fn, 0));\r\n\r\nexport function _addToNextTickQueue(fn) {\r\n    if(fn) _nextTickQueue.push(fn);\r\n}\r\n\r\n/** @export @param {(DomWorkOrder | Function)} update */\r\nexport function _scheduleUpdate(update) {\r\n    workArray.push(update);\r\n    if(!cancelAnimationFrame) {\r\n        cancelAnimationFrame = true;\r\n        tick(_runUpdates);\r\n    }\r\n}\r\n\r\nfunction _addSpacer(inEl, wrapper, wrapperHeight, replaceWholeObject = false, ops) {\r\n    if(!ops.trans?.smartTransition ?? true) return;\r\n    //Conserve parent size\r\n    spacer = document.createElement(\"div\");\r\n    \r\n    let { paddingTop, paddingBottom } = wrapper instanceof Element ? window.getComputedStyle(wrapper) : { paddingTop: 0, paddingBottom: 0 };\r\n    spacerHeight = spacer.style.height = `calc(${(Math.abs(wrapperHeight - (inEl?.clientHeight || 0)))}px - ${paddingTop} - ${paddingBottom})`;\r\n\r\n    wrapper?.after(spacer);\r\n}\r\n\r\nfunction _adjustSizing(inEl, ops) {\r\n    if(!ops.trans?.smartTransition ?? true) return;\r\n    let dur = (ops?.trans?.dur?.[0] || ops?.trans?.dur || 600)/2\r\n\r\n    _scheduleUpdate(()=> {\r\n        spacer?.remove();\r\n        inEl?.animate?.([\r\n            { height: spacerHeight },\r\n            { height: `${inEl.clientHeight || 0}px` }\r\n        ], dur);\r\n    });\r\n}\r\n\r\nfunction _runUpdates() {\r\n    cancelAnimationFrame = false;\r\n    \r\n    /**\r\n    * @type {DomWorkOrder[]}\r\n    */\r\n    for(let order of workArray) {\r\n        if(typeof order == \"function\") (/** @type {Function} */ order)();\r\n        else {\r\n            let wrapperHeight = order.out ? order.out.clientHeight : 0;\r\n\r\n            // Prepend\r\n            if(order.relation == \"prepend\") {\r\n                _addSpacer?.(order.in, order.out, wrapperHeight, false, order.ops);\r\n\r\n                //Prepend\r\n                _applyTransition(order.in, \"in\", order.ops, ()=> {\r\n                    if(order.in) order.out?.prepend(order.in);\r\n                    _adjustSizing?.(order.in, order.ops);\r\n                });\r\n            }\r\n            // Remove old children\r\n            else {\r\n                if([\"swapinner\", \"swapouter\"].includes(order.relation)) {\r\n                    //Remove old children before appending (if swapping children)\r\n                    let container = /** @type {HTMLElement | null}*/(order.out?.cloneNode(true));\r\n\r\n                    if(container) {\r\n                        order.out?.after(container);\r\n                        let getDimensionsAfterUpdate = order.relation == \"swapinner\" ? true : false;\r\n\r\n                        if(order.relation == \"swapinner\") {\r\n                            container.style.border = \"none\";\r\n                            order.out.replaceChildren();\r\n                        }\r\n\r\n                        // Transition old children out\r\n                        _applyTransition(container, \"out\", order.ops, undefined, order.out, getDimensionsAfterUpdate);\r\n                    }\r\n                }\r\n\r\n                _addSpacer?.(order.in, order.out, wrapperHeight, false, order.ops);\r\n\r\n                // Transition incoming element and append\r\n                _applyTransition(order.in, \"in\", order.ops, ()=> {\r\n                    if(order.in) {\r\n                        if(order.relation == \"swapouter\") order.out?.replaceWith(order.in)\r\n                        else order.out?.appendChild(order.in);\r\n                    }\r\n                    _adjustSizing?.(order.in, order.ops);\r\n                });\r\n            }\r\n\r\n            order.done?.(order.in);\r\n        }\r\n    }\r\n\r\n    //Handle queued nextTick functions\r\n    for(let fn of _nextTickQueue) fn();\r\n    _nextTickQueue = [];\r\n    workArray = [];\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el \r\n * @param {\"in\" | \"out\"} dir \r\n * @param {Partial<MfldOps>} ops \r\n * @param {Function} [fn] \r\n * @param {HTMLElement} [refElement]\r\n * @param {boolean} [getDimensionsAfterUpdate]\r\n * @returns \r\n */\r\nexport function _applyTransition(el, dir, ops, fn, refElement, getDimensionsAfterUpdate = false) {\r\n    //Handle text nodes\r\n    if(el?.nodeType == Node.TEXT_NODE) {\r\n        let text = el.textContent;\r\n        let newNode = document?.createElement(\"div\");\r\n        newNode.textContent = text;\r\n        el.replaceWith(newNode);\r\n        el = newNode;\r\n    }\r\n\r\n    if(el) {\r\n        let dur = Array.isArray(ops.trans?.dur) ? ops.trans?.dur[dir == \"in\" ? 0 : 1] || ops.trans?.dur[0] : ops.trans?.dur || 0;\r\n\r\n        //Initiate transition\r\n        let transClass = ops?.trans?.class || `${ATTR_PREFIX}trans`;\r\n        el?.classList?.add(transClass);\r\n        ops.trans?.hooks?.[`${dir}-start`]?.(el);\r\n\r\n        //Wait to apply class\r\n        if(dir == \"out\") {\r\n            // Set dimensions\r\n            if(!refElement) refElement = el;\r\n            if(!refElement) return;\r\n            let dimensions = {};\r\n            if((ops.trans?.smartTransition ?? true) && getDimensionsAfterUpdate == false) {\r\n                let style = getComputedStyle(refElement);\r\n                dimensions.w = `calc(${(refElement).clientWidth}px - ${style.paddingLeft} - ${style.paddingRight})`;\r\n                dimensions.left = `calc(${refElement.getBoundingClientRect().left}px + ${window.scrollX}px)`;\r\n                dimensions.top = `calc(${refElement.getBoundingClientRect().top}px + ${window.scrollY}px)`;\r\n            }\r\n\r\n            _scheduleUpdate(()=> {\r\n                if(ops.trans?.smartTransition ?? true) {\r\n                    if(getDimensionsAfterUpdate && refElement) {\r\n                        let style = getComputedStyle(refElement);\r\n                        dimensions.w = `calc(${(refElement).clientWidth}px - ${style.paddingLeft} - ${style.paddingRight})`;\r\n                        dimensions.left = `calc(${refElement.getBoundingClientRect().left}px + ${window.scrollX}px)`;\r\n                        dimensions.top = `calc(${refElement.getBoundingClientRect().top}px + ${window.scrollY}px)`;\r\n                    }\r\n                    \r\n                    el.style.position = \"fixed\";\r\n                    el.style.width = dimensions.w;\r\n                    el.style.left = dimensions.left;\r\n                    el.style.top = dimensions.top;\r\n                    el.style.margin = \"0\";\r\n                }\r\n\r\n                if(dur) el.style.transitionDuration = `${dur}ms`;\r\n                el.classList?.add(\"out\");\r\n            })\r\n        }\r\n        //If dir == in\r\n        else {\r\n            el?.classList?.add(\"in\");\r\n            if(dur) el.style.transitionDuration = `${dur}ms`;\r\n            fn?.();\r\n            setTimeout(()=> {\r\n                _scheduleUpdate(()=> {\r\n                    setTimeout(()=> _scheduleUpdate(()=> el?.classList?.remove(dir)), 0);\r\n                });\r\n            }, ops.trans?.swap || 0);\r\n        }\r\n        \r\n        setTimeout(()=> {\r\n            _scheduleUpdate(()=> {\r\n                //Wrapup\r\n                if(dir == \"out\") el?.remove();\r\n                el?.classList?.remove(transClass);\r\n                ops.trans?.hooks?.[`${dir}-end`]?.(el);\r\n            });\r\n        }, \r\n        dur + (dir == \"in\" ? ops.trans?.swap || 0 : 0));\r\n    }\r\n}","/** \n * @template T\n * @typedef {import(\"./index.module.js\").UpdaterFunction<T>} UpdaterFunction \n */\n/** \n * @template T\n * @typedef {import(\"./index.module.js\").StoreOptions<T>} StoreOptions \n */\n\nimport { _scheduleUpdate } from \"./updates.js\";\n\n/**\n * @callback SubFunction\n * @param {any} value\n * @param {string} [ref]\n * @returns {void}\n */\n\n/**\n * @param {any} input \n * @returns {any}\n */\nfunction _hashAny(input) {\n    if(!input) return 0;\n    if(typeof input == 'number') return input;\n    if(input === true) return 1;\n\n    if(input instanceof Map) return _hashAny(Array.from(input.entries()));\n    else if(input instanceof Set) return _hashAny(Array.from(input));\n\n    let hash = 0;\n    for(let char of new TextEncoder().encode(\n        typeof input == 'string' ? input : input?.toString() || \"\"\n    )) \n        hash = ((hash << 5) - hash) + char;\n    return hash;\n}\n\n//Static\n/** @type {Map<string, Store<any>>} */ if(!globalThis.MfSt) globalThis.MfSt = new Map();\n/** @type {Map<string, Function>} */ if(!globalThis.MfFn) globalThis.MfFn = new Map();\n\n/**\n * @template T\n */\nexport class Store {\n    /** @type {UpdaterFunction<T> | undefined} */ _updater = undefined;\n    /** @type {Map<string, SubFunction>} */ _subscriptions = new Map();\n    /** @type {string | undefined} */ _storedHash = undefined;\n    /** @type {Set<Store<any>>} */ _upstreamStores = new Set();\n    /** @type {Set<Store<any>>} */ _downstreamStores = new Set();\n\n    /**\n     * @param {string} name\n     * @param {StoreOptions<T>} [ops]\n     */\n    constructor(name, ops) {\n        return this._modify(name, ops);        \n    }\n\n    /**\n     * @param {string} name\n     * @param {StoreOptions<T>} [ops]\n     */\n    _modify(name, ops) {\n        this.name = name;\n        // @ts-ignore\n        MfSt.set(name, this);\n        \n        (ops?.upstream?.map(s=> {\n            let S = _store(s);\n            this._upstreamStores.add(S);\n            S._downstreamStores.add(this);\n            return S;\n        }) || []);\n\n        this.value = ops?.value;\n        this._updater = ops?.updater;\n        this._auto_update();\n        return this;\n    }\n\n    /**\n     * @param {(T)=> void} sub\n     * @param {string | undefined} [ref]\n     * @param {boolean} [immediate]\n     */\n    sub(sub, ref, immediate = true) {\n        this._subscriptions.set(ref || String(Date.now() + Math.random()), sub);\n        if(immediate) sub?.(this.value);\n    }\n\n    //Update (manual or automated -- cascades downstream on batch updates)\n    /**\n    * @template T\n    * @param {T | ((T)=> T | Promise<T>)} value\n    */\n    async update(value) {\n        return new Promise(async (resolve)=> {\n            //Apply new value   \n            let newValue = (typeof value == \"function\" ? /** @type {Function} */(await value)?.(this.value) : value);\n            let newHash = _hashAny(newValue);\n            \n            if(newHash !== this._storedHash) {\n                this.value = newValue;\n                this._storedHash = newHash;\n\n                // Add this store to the work order\n                for(let ds of this._downstreamStores) await ds._auto_update();\n\n                // Wait for next animation frame to return the value\n                _scheduleUpdate(()=> {\n                    for(let [ref, sub] of this?._subscriptions || []) sub?.(this.value, ref);\n                    resolve(this.value);\n                });\n            }\n            else resolve(this.value);\n        });\n    }\n\n    async _auto_update() {\n        let newVal = await this._updater?.(\n            Array.from(this._upstreamStores)?.map(S => S?.value) || [], \n            /** @type {T} */(this?.value)\n        );\n\n        await this.update(newVal === undefined ? this.value : newVal);\n    }\n}\n\n/**\n * STORE STATIC METHODS\n */\n/**\n * @template T\n * @param {string} name - The name of the store\n * @param {StoreOptions<T> | T} [ops] - Options to update the store\n * @returns {Store<T>}\n */\nexport function _store(name, ops) {\n    // @ts-ignore\n    let found_store = MfSt.get(name);\n    if(ops) {\n        if(found_store) {\n            return found_store._modify(name, ops);\n        }\n        return new Store(name, ops);\n    }\n    return found_store || new Store(name, /** @type {StoreOptions<T>}*/(ops));\n}","import { _parseFunction, ATTR_PREFIX } from \"./util.js\";\r\nimport { _scheduleUpdate } from \"./updates\";\r\nimport { _registerSubs } from \"./registrar.js\";\r\nimport { _store } from \"./store.js\";\r\n\r\n/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\r\n\r\n/**\r\n * @param {HTMLElement} el \r\n * @param {string} trigger \r\n * @param {MfldOps} fetchOps\r\n * @param {string} href\r\n * @param {string} [method] \r\n * @param {any} [input]\r\n * @param {Function} [processFunc]\r\n */\r\nexport function _handleFetch(el, trigger, fetchOps, href, method, input, processFunc) {\r\n    /**\r\n     * @param {Event} [e]\r\n     */\r\n    let ev = async e=> {  \r\n        e?.preventDefault();\r\n        e?.stopPropagation();\r\n\r\n        // Set from target element if relevant; fall back to \"get\"\r\n        if(!method) method = /** @type {any}*/(e?.target)?.method || \"get\";\r\n    \r\n        //Make sure we're allowed to fetch\r\n        let externalPermissions = fetchOps?.fetch?.externals?.find(allowed=> href?.startsWith(allowed.domain)) || \r\n            !href.match(/^https?:\\/\\//) || href.includes(location.origin) ? {\r\n                scripts: true,\r\n                styles: true,\r\n        } : undefined;\r\n\r\n        // Parse input\r\n        let body = Array.isArray(input) ? input[0] : input == \"$form\" ? new FormData(/** @type {HTMLFormElement}*/(el)) : input;\r\n        if(processFunc) {\r\n            let toFunc = Array.isArray(input) ? (input?.map(s=> _store(s).value) || []) : [body];\r\n            body = processFunc?.(...toFunc)\r\n        }\r\n\r\n        //Fetch data\r\n        let data = await fetch(href, {\r\n            ...(fetchOps?.fetch?.request || {}),\r\n            headers: {\r\n                ...fetchOps?.fetch?.request?.headers,\r\n                \"Manifold-App-Fetch\": \"true\",\r\n            },\r\n            method,\r\n            body: input == \"$form\" || typeof body == \"string\" ? body : JSON.stringify(body),\r\n        })\r\n        .catch(error=> {\r\n            fetchOps?.fetch?.err?.(error) || console.error(\"FETCH ERROR\", error);\r\n        });\r\n\r\n        //Handle onCode callback\r\n        let code = data?.status;\r\n        if(code && fetchOps?.fetch?.onCode?.(code, data) == false) return;\r\n\r\n        //Return JSON or text in callback\r\n        let resp = await data?.[fetchOps?.fetch?.responseType || \"text\"]();\r\n\r\n        // Handle resolutions\r\n        for(let instruction of [\"append\", \"prepend\", \"swapinner\", \"swapouter\"]) {\r\n            let ds = el.dataset[`${ATTR_PREFIX}${instruction}`];\r\n            if(ds === undefined) continue;\r\n            let [selector, toReplace] = ds?.split(\"->\").map(s=> s.trim()) || [];\r\n\r\n            //Extract content and schedule a DOM update\r\n            let fullMarkup = (new DOMParser())?.parseFromString?.(resp, 'text/html');\r\n            if(fullMarkup) {\r\n                _scheduleUpdate({\r\n                    in: /** @type {HTMLElement} */ (fullMarkup.querySelector(selector || \"body\")),\r\n                    out: /** @type {HTMLElement} */ (toReplace ? document.querySelector(toReplace) : el),\r\n                    relation: /** @type {\"append\" | \"prepend\" | \"swapinner\" | \"swapouter\"}*/(instruction),\r\n                    ops: fetchOps,\r\n                    done: (el)=> {\r\n                        _registerSubs(el)\r\n                    },\r\n                });\r\n            }\r\n        }\r\n\r\n        //Push to history if requested\r\n        if(el.dataset?.[`${ATTR_PREFIX}pushstate`] !== undefined) {\r\n            history.pushState({}, \"\", href);\r\n        }\r\n\r\n        let resolveTxt = el.dataset?.[`${ATTR_PREFIX}resolve`];\r\n        let resolveFunc = _parseFunction(resolveTxt || \"\")?.func;\r\n        resolveFunc?.(resp);\r\n\r\n            // //Clear existing scripts/styles\r\n            // for(let s of [pageScripts, pageStyles]) {\r\n            //     let elements = s.get(fullMarkup) || [];\r\n            //     elements.forEach(el => el.remove());\r\n            //     s.set(fullMarkup, []);\r\n            // }\r\n\r\n            // //Get scripts and styles\r\n            // let seek: string[] = ops.allowScripts ? [\"scripts\"] : [];\r\n            // if(ops.allowStyles) seek.push(\"style\");\r\n            // if(seek.length) {\r\n            //     let globls: NodeListOf<HTMLScriptElement | HTMLStyleElement> = fullMarkup.querySelectorAll(seek.join(\",\"));\r\n            //     for(let el of globls) {\r\n            //         let isScript = el instanceof HTMLScriptElement;\r\n            //         let source = isScript ? pageScripts : pageStyles;\r\n\r\n            //         if(isScript ? ops.allowScripts : ops.allowStyles){\r\n            //             if(!source.has(parent)) source.set(parent, []);\r\n            //             source.get(parent)?.push(el as any);\r\n            //         }\r\n            //         else if(isScript) el.parentNode?.removeChild(el);\r\n            //     }\r\n            // }\r\n    }\r\n\r\n    if(trigger == \"$mount\") ev();\r\n    else el.addEventListener(trigger, ev);\r\n}","import { _store } from \"./store\";\r\nimport { _scheduleUpdate } from \"./updates\";\r\nimport { _getStorePathFromKey, _inputNestSplitRx, _nestedValue, ATTR_PREFIX } from \"./util\";\r\n\r\nexport function _handleBindSync(el, input, output, trigger, mode, processFunc) {\r\n    /**\r\n     * HANDLE MF-BIND - inputs are stores, output is element property\r\n     */\r\n    if(mode == `${ATTR_PREFIX}bind`) {\r\n        let stores = input.map(_getStorePathFromKey);\r\n        let domSubscription = ()=> {\r\n            _scheduleUpdate(()=> {\r\n                let storeValues = stores.map(s=> _nestedValue(_store(s[0])?.value, s[1]));\r\n                let val = processFunc?.(...storeValues, el) ?? storeValues[0];\r\n                if(output && val !== undefined) {\r\n                    let parts = output.split(\":\");\r\n                    if(parts.length > 1) {\r\n                        switch(parts[0]) {\r\n                            case \"style\": el.style[parts[1]] = val; break;\r\n                            case \"attr\": el.setAttribute(parts[1], val); break;\r\n                            default: el[output] = val;\r\n                        }\r\n                    }\r\n                    else el[output] = val;\r\n                }\r\n\r\n                //Make sure to update dependent stores on value update\r\n                el.dispatchEvent(new CustomEvent(trigger));\r\n            });\r\n        }\r\n    \r\n        //Add subscription - run whenever store updates\r\n        for(let s of stores) _store(s?.[0]|| \"\")?.sub(domSubscription);\r\n    }\r\n\r\n    else {\r\n        /**\r\n         * HANDLE MF-SYNC - inputs are element properties, output is a store\r\n         */\r\n        if(mode == `${ATTR_PREFIX}sync`) {\r\n            let [storeName, path] = _getStorePathFromKey(output || \"\");\r\n            let ev = ()=> {\r\n                let propValues = input.map(prop=> {\r\n                    prop = prop.trim();\r\n                    let parts = prop.split(\":\");\r\n                    if(parts.length > 1) {\r\n                        switch(parts[0]) {\r\n                            case \"style\": return el.style[prop] ?? undefined;\r\n                            case \"attr\": return el.getAttribute(prop) ?? undefined;\r\n                            default: return el[prop] ?? undefined;\r\n                        }\r\n                    }\r\n                    else return el[prop] ?? undefined;\r\n                });\r\n\r\n                let value = processFunc?.(...propValues) ?? propValues[0];\r\n                \r\n                if(storeName && value !== undefined) {\r\n                    _store(storeName)?.update?.(curVal=> {\r\n                        return path?.length ? _nestedValue(curVal, path, value) : value\r\n                    });\r\n                }\r\n            }\r\n            if(trigger == \"$mount\") ev();\r\n            else el.addEventListener(trigger, ev);\r\n        }\r\n    }\r\n}","import { _registerSubs } from \"./registrar\";\nimport { _store } from \"./store\";\nimport { _applyTransition, _scheduleUpdate } from \"./updates\";\nimport { _getStorePathFromKey, _parseFunction, ATTR_PREFIX } from \"./util\";\n\n/**\n * @param {HTMLElement} el\n * @returns {HTMLElement}\n */\nfunction _ensureTemplate(el) {\n    // Make sure this is a template\n    if(el.tagName != \"TEMPLATE\") {\n        let newEl = document.createElement(\"template\");\n        newEl.innerHTML = el.innerHTML;                \n        for(let attr of el.attributes) {\n            newEl.setAttribute(attr.name, attr.value);\n        }\n        el.replaceWith(newEl);\n\n        // If not, it's default content\n        return newEl;\n    }\n    return el;\n}\n\n/**\n * @param {any} obj \n * @param {(value: any, index: any, array?: any)=> void} cb \n */\nfunction _iterable(obj, cb) {\n    if(obj instanceof Map) for(const [key, value] of obj.entries()) cb(key, value);\n    else {\n        try { \n            let arr = Array.from(obj);\n            if(arr?.length) arr.forEach(cb);\n            else for(let key in obj) cb(key, obj[key]);\n        }\n        catch(e) { console.error(`${obj} is not iterable`); }\n    }\n}\n\nfunction _iterateSiblings(sib, breakFn, cb) {\n    if(breakFn(sib)) return;\n    sib = cb(sib) || sib;\n    _iterateSiblings(sib?.nextElementSibling, breakFn, cb);\n}\n\n/**\n * @param {string} [storeName] \n * @param {string[]} [storeList] \n * @param {any[]} [conditionChain] \n * @param {number} [upstreamConditionsLen] \n * @param {Function} [func] \n * @returns \n */\nfunction _registerConditionStore(storeName, storeList, conditionChain, upstreamConditionsLen, func) {\n    // Register new store (to prevent excess evaluations)\n    return _store(storeName || \"\", {\n        upstream: [...storeList || [], ...conditionChain || []],\n        updater: (list)=> {\n            if(upstreamConditionsLen) {\n                for(let condition of list.slice(storeList?.length || 0) || []) {\n                    if(condition) return false;\n                }\n            }\n            console.log(\"UPDATING \", storeName, list, func?.(...list))\n            return func?.(...list);\n        }\n    });\n}\n\n/**\n * Handle conditional and loop elements\n * @param {HTMLElement} el \n * @param {string} mode \n * @param {import(\"./index.module\").MfldOps} ops \n */\nexport function _handleConditionals(el, mode, ops) {\n    let startElement = document.createElement(\"template\");\n    let endElement = document.createElement(\"template\");\n    startElement.classList.add(\"mfld-start\");\n    endElement.classList.add(\"mfld-end\");\n    el.before(startElement);\n\n    if(mode == `${ATTR_PREFIX}if`) {\n        // Set up conditions\n        let conditionChain = [];\n        let upstreamConditionsLen = conditionChain.length;\n\n        // Iterate siblings to add implicit else\n        let hasElse = false;\n        _iterateSiblings(\n            startElement?.nextElementSibling,\n            (sib)=> sib?.dataset[`${ATTR_PREFIX}if`] == undefined && sib?.dataset[`${ATTR_PREFIX}elseif`] == undefined && sib?.dataset[`${ATTR_PREFIX}else`] == undefined,\n            (sib)=> {\n                if(sib?.dataset[`${ATTR_PREFIX}else`] == undefined && !hasElse) {\n                    console.log(\"ADDING IMPLICIT ELSE\")\n                    // Register implicit else\n                    hasElse = true;\n                    let implElse = document.createElement(\"template\");\n                    implElse.dataset[`${ATTR_PREFIX}else`] = \"()=> true\";\n                    implElse.innerHTML = \"<div>VISIBLE IF NO CONDITIONS</div>\"\n                    sib.after(implElse);\n                }\n                else hasElse = true;\n            }\n        );\n        \n        // Iterate siblings to get condition branches\n        _iterateSiblings(\n            startElement?.nextElementSibling,\n            (sib)=> {\n                let end = 0;\n                for(let i of [\"if\", \"elseif\", \"else\"]) if(sib?.dataset[`${ATTR_PREFIX}${i}`] == undefined) end++;\n                if(end < 3) return false;\n                sib?.before(endElement);\n                return true;\n            },\n            (sib)=> {\n                console.log(\"Handling sibling\", sib);\n                let { storeList, func, storeName } = _parseFunction({\n                    el: sib, \n                    datakey: conditionChain.length ? el.dataset?.[`${ATTR_PREFIX}elseif`] ? `${ATTR_PREFIX}elseif` : `${ATTR_PREFIX}else` : mode\n                });\n                if(!storeList && !func) return;\n    \n                // Ensure template\n                sib = _ensureTemplate(sib);\n    \n                // Register condition store\n                let conditionStore = _registerConditionStore(storeName, storeList, conditionChain, upstreamConditionsLen, func);\n                conditionChain.push(conditionStore.name);\n    \n                // Subscribe\n                conditionStore?.sub(val=> {\n                    if(!val) {\n                        return;\n                    }\n    \n                    _scheduleUpdate(()=> {\n                        _iterateSiblings(\n                            startElement?.nextElementSibling, \n                            (sib)=> sib?.classList?.contains(\"mfld-end\"),\n                            (sib)=> { \n                                if(sib?.nodeName != \"TEMPLATE\") _applyTransition(/** @type {HTMLElement}*/(sib), \"out\", ops, ()=> sib?.remove()); \n                            }\n                        );\n                    });\n    \n                    // Replace values\n                    _scheduleUpdate(()=> {\n                        let sibClone = sib.cloneNode(true);\n                        for(let element of /** @type {HTMLTemplateElement}*/(sibClone).content.children) {\n                            endElement.before(element);\n                            _applyTransition(/** @type {HTMLElement}*/(element), \"in\", ops, ()=> _registerSubs(/** @type {HTMLElement}*/(element)));\n                        }\n                    });\n                });  \n                \n                return sib;\n            },\n        );\n    }\n\n    if(mode == `${ATTR_PREFIX}each`) {\n        el.before(endElement);\n\n        let [ funcStr, aliases ] = el.dataset[`${ATTR_PREFIX}each`]?.split(\"as\")?.map(s=> s.trim()) || [];\n        let [ valueName, keyName ] = aliases.split(/\\s{0,},\\s{0,}/)?.map(s=> s.trim()) || [\"value\", \"key\"];\n        let { storeList, func, storeName } = _parseFunction(funcStr);  \n        \n        // Ensure template\n        el = _ensureTemplate(el);\n\n        // Register condition store\n        let conditionStore = _registerConditionStore(`LOOP:${storeName}`, storeList, [], 0, func);\n        conditionStore?.sub(val=> {\n            _scheduleUpdate(()=> {\n                _iterateSiblings(\n                    startElement?.nextElementSibling, \n                    (sib)=> sib?.classList?.contains(\"mfld-end\"),\n                    (sib)=> _applyTransition(/** @type {HTMLElement}*/(sib), \"out\", ops, ()=> sib?.remove()), \n                );\n            });\n            _scheduleUpdate(()=> {\n                _iterable(val || [], (key, value)=> {\n                    let html = el.innerHTML;\n\n                    // Get all logical bindings and replace values\n                    let replacements = el.innerHTML.match(/\\${[^}]*}/g) || [];\n                    for(let rep of replacements) {\n                        let repClean = rep.replace(/^\\$\\{|\\}$/g, \"\");\n\n                        try {\n                            let fn = _parseFunction(`(${keyName}, ${valueName})=> ${repClean}`)?.func;\n                            html = html.replace(rep, fn?.(value, key) || \"\");\n                        }\n                        catch(e) {\n                            console.error(\"Syntax error in loop function\", e);\n                        }\n                    }\n\n                    let item = /** @type {HTMLTemplateElement}*/(el.cloneNode(true));\n                    item.innerHTML = html;\n\n                    // Replace values\n                    for(let element of item.content.children) {\n                        endElement.before(element);\n                        _applyTransition(/** @type {HTMLElement}*/(element), \"in\", ops, ()=> _registerSubs(/** @type {HTMLElement}*/(element)));\n                    }\n                });\n            });\n        })\n    }\n}","import { _store } from \"./store.js\";\nimport { _scheduleUpdate } from \"./updates.js\";\nimport { _getOpOverrides, _parseFunction, ATTR_PREFIX } from \"./util.js\";\nimport { _handleFetch } from \"./fetch.js\";\nimport { _handleBindSync } from \"./bindsync.js\";\nimport { _handleConditionals } from \"./conditionals.js\";\n/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\n\n/** @type {Partial<MfldOps>} */\nlet _ops = {};\nlet _commaSepRx = /, {0,}/g;\nlet _modes = [\"bind\", \"sync\", \"if\", \"each\", \"get\", \"head\", \"post\", \"put\", \"delete\", \"patch\"].map(m=> `${ATTR_PREFIX}${m}`);\n\n/**!\n * @param {Partial<MfldOps>} newops \n * @param {string} [profileName] \n */\nexport function _setOptions(newops, profileName) {\n    if(profileName) _ops.profiles = { ..._ops.profiles, [profileName]: newops };\n    else _ops = { ..._ops, ...newops };\n}\n\n// Handle location state changes\nglobalThis.addEventListener(\"popstate\", (e)=> {\n    // for(let update of e.state) {\n    //     _scheduleUpdate(update);\n    // }\n});\n\n//Register subscriptions on the DOM (scopable in case an update needs run on a subset of the DOM)\n/**\n * @param {HTMLElement | null} [parent] \n */\nexport function _registerSubs(parent) {\n    if(parent && parent.nodeType == Node.TEXT_NODE) return;\n    \n    /** @type {NodeListOf<HTMLElement> | []} */\n    let els = (parent || document.body).querySelectorAll(\n        `[data-${_modes.join(`],[data-`)}],a,form`\n    ) || [];\n\n    for(let el of els) {\n        let _op_overrides = _getOpOverrides(_ops, el);\n\n        //Check for <a> and <form> elements\n        if(el.dataset?.[`${ATTR_PREFIX}promote`] !== undefined) {\n            let [mode, href, input, trigger] = el.tagName == \"A\" ?\n                [\"get\", /** @type {HTMLAnchorElement}*/(el).href, \"\", \"click\"] : \n                [/** @type {HTMLFormElement}*/(el).method.toLowerCase(), /** @type {HTMLFormElement}*/(el).action, \"$form\", \"submit\"];\n\n            if(href) {\n                _handleFetch(el, trigger, _op_overrides, href, mode, input);\n                continue;\n            }\n        }\n\n        //Loop over all data attributes (modes)\n        for(let mode in el.dataset) {\n            //HANDLE CONDITIONALS AND LOOPS\n            if([`${ATTR_PREFIX}if`, `${ATTR_PREFIX}each`].includes(mode)) {\n                _handleConditionals(el, mode, _op_overrides);\n                continue;\n            }\n\n            if(!_modes.includes(mode)) continue;\n            let shouldHaveTriggers = ![`${ATTR_PREFIX}bind`].includes(mode);\n\n            //Loop over provided settings\n            for(let setting of el.dataset?.[mode]?.split(\";\") || []) {\n                //Break out settings\n                let [sourceParts, output] = setting?.split(\"->\")?.map(s=> s.trim()) || [];\n                let triggers = shouldHaveTriggers ? _paramsInParens(sourceParts.slice(0, sourceParts.indexOf(\")\"))) : [];\n                let funcAndInput = shouldHaveTriggers ? sourceParts.slice(sourceParts.indexOf(\")\") + 1) : sourceParts;\n                let processFuncName = funcAndInput.includes(\"=>\") ? funcAndInput : funcAndInput.includes(\"(\") ? funcAndInput.match(/^[^\\(]{1,}/)?.[0] || \"\" : \"\";\n                let input = processFuncName ? _paramsInParens(funcAndInput.slice(0, (funcAndInput.indexOf(\")\") || -2) + 1)) : funcAndInput.split(_commaSepRx)?.map(s=> s.trim());\n\n                //Handle errors\n                if(shouldHaveTriggers && !triggers?.length) { console.error(\"No trigger\", el); break; }\n\n                /** @type {Function | undefined} */\n                let processFunc = _parseFunction(processFuncName)?.func;\n                if(processFuncName) {\n                    if(!processFunc) console.warn(`\"${processFuncName}\" not registered`, el);\n                }\n                else if(input.length > 1) console.warn(\"Multiple inputs without function\", el);\n\n                //Loop over triggers\n                if(!triggers?.length) triggers = [\"\"]\n                for(let trigger of triggers) {\n                    if(mode.match(/bind|sync/)) _handleBindSync(el, input, output, trigger, mode, processFunc);\n                    else {\n                        if(!output) {\n                            output = input[0];\n                            input = [];\n                        }\n                        _handleFetch(el, trigger, _op_overrides, output, mode.replace(ATTR_PREFIX, \"\"), input, processFunc);\n                    }\n                }\n            }; //End loop settings\n        }   //End loop dataset modes\n    };  //End loop elements\n}\n\n/**\n * @param {string} str \n * @returns \n */\nfunction _paramsInParens(str) {\n    if(str?.includes(\"(\")) {\n        let matches = str.match(/[^\\(\\)]{1,}/g);\n        str = matches?.[matches.length - 1] || \"\";\n    }\n    return str?.split(_commaSepRx)?.map(s=> s.trim()) || [];\n}","import { _store } from \"./store.js\";\nimport { _addToNextTickQueue } from \"./updates.js\";\nimport { _registerSubs, _setOptions } from \"./registrar.js\";\n\n/**! @typedef {\"in-start\"|\"in-end\"|\"out-start\"|\"out-end\"} HookKey*/\n\n/**!\n * @typedef {object} ExternalOptions\n * @property {string} domain - The domain name these settings apply to\n * @property {boolean} [scripts] - Allow scripts from this domain to execute\n * @property {boolean} [styles] - Allow styles from this domain to apply\n */\n\n/**!\n * @typedef {object} FetchOptions\n * @property {RequestInit} [request] - Fetch request options\n * @property {\"json\"|\"text\"} [responseType] - Response type (default: \"text\")\n * @property {(err: Error)=> void} [err] - Error callback - run on fetch error\n * @property {(code: number, data: void | Response)=> boolean | void} [onCode] - Callback function - run on fetch response code; return `false` to prevent further processing\n * @property {ExternalOptions[]} [externals] - External domain fetch settings\n */\n\n/**!\n * @typedef {object} TransitionOptions\n * @property {string} [class] - CSS class applied to transitions (default: `mfTrans`)\n * @property {[number, number] | number} [dur] - Transition duration: [in, out] or single value (in ms); default: 300\n * @property {number} [swap] - Swap delay (in ms) - applied between one element's outro start and the replacement's intro start; default: 0\n * @property {boolean} [smartTransition] - Enable smart transitions (default: true)\n * @property {{ [key in HookKey]?: (el: HTMLElement)=> void }} [hooks] - Transition hooks\n */\n\n/**!\n * Manifold options for `fetch`, `trans`, and `profiles`.\n * @typedef {Object} MfldOps\n * @property {{ [ key: string ]: Partial<MfldOps> }} [profiles] - Fetch profiles assignable to elements\n * @property {FetchOptions} [fetch] - Fetch options - see https://google.com\n * @property {TransitionOptions} [trans] - Transition settings - see https://google.com\n */\n\n/**!\n * @template T\n * @callback UpdaterFunction\n * @param {Array<any>} upstreamValues\n * @param {T} value\n * @returns {T | Promise<T>}\n */\n\n/**!\n * @template T\n * @callback ValueDeterminer\n * @param {T} [currentValue]\n * @returns {T | Promise<T> | undefined}\n */\n\n/**!\n * @template T\n * @callback UpdateFunction\n * @param {T | ValueDeterminer<T>} value\n * @returns {T | Promise<T> | undefined}\n */\n\n/**!\n * @template T\n * @callback SubDeterminer\n * @param {T} value\n * @returns {void}\n */\n\n/**!\n * @template T\n * @callback SubFunction\n * @param {SubDeterminer<T>} value The store's current value\n * @returns void\n */\n\n/**!\n * @template T\n * @typedef {Object} StoreOptions\n * @property {T} [value]\n * @property {Array<string>} [upstream]\n * @property {UpdaterFunction<T>} [updater]\n */\n\n/**!\n * @template T\n * @typedef Store\n * @prop {T} value - The store's current value (read only)\n * @prop {UpdateFunction<T>} update - Update the store's current value\n * @prop {SubFunction<T>} sub - Add a subscription function to the store\n */\n\n/**!\n * @typedef {Function} MfldFunc\n * @param {any} val\n * @param {HTMLElement} [el]\n */\n\n/**!\n * The global Manifold interface.\n */\nexport let Mfld = {\nstore: \n/**!\n* - Create or overwrite a _typed_ global Manifold store by passing `store_ops` (`MfldOps`) -> *returns `Store\\<T\\>`* \n* - Retrieve an untyped reference to the store specified by name by omitting `store_ops` -> *returns `Store\\<any\\>`*\n* @template T\n* @param {string} store_name\n* @param {StoreOptions<T> | T} store_ops\n* @return {Store<T>}\n*/ (store_name, store_ops)=> {\n    if(!store_ops?.hasOwnProperty(\"value\") && !store_ops?.hasOwnProperty(\"updater\")) {\n        store_ops = /** @type {StoreOptions<T>}*/({ value: /** @type {T}*/store_ops });\n    }\n    return /**@type {Store<T>}*/(_store(store_name, /**@type {StoreOptions<T>}*/store_ops))\n},\nustore: \n/**!\n* - Create or overwrite an untyped global Manifold store by passing `store_ops` (`MfldOps`) -> *returns `Store\\<any\\>`* \n* - Retrieve an untyped reference to the store specified by name by omitting `store_ops` -> *returns `Store\\<any\\>`*\n* @param {string} store_name\n* @param {StoreOptions<any> | any} store_ops\n* @return {Store<any>}\n*/ (store_name, store_ops)=> /**@type {Store<any>}*/(_store(store_name, store_ops)),\nget:\n/**!\n * - Retrieve a Manifold store by name. *returns `Store\\<any\\>`*\n * @param {string} store_name\n * @return {Store<any>}\n */ (store_name)=> /**@type {Store<any>}*/(_store(store_name)),\nfunc: \n/**!\n * - Retrieve a Manifold function by name. *val* refers to the store's current value; *el* refers to the element that triggered the update (if applicable). *returns `MfldFunc`*\n * - *Note:* Functions retrived using this method cannot infer the type of the store's value and is therefore **not** type-checked. It is preferable to keep a reference to the function if you need to preserve type information.\n * @param {string} func_name\n * @return {MfldFunc}\n */ (func_name)=> /** @type {(val: any, el?: HTMLElement)=> void}*/(\n// @ts-ignore\n MfFn?.get(func_name)),\nfuncs: \n/**!\n * - Add functions to the Manifold function registry in key-value pairs.\n * - Functions must be registered in order to be accessible to HTML elements via `mfBind`, `mfSync`, and `mfResolve`. \n * - It may still be beneficial to keep a reference to the original function if you need to preserve type information.\n * @param {{ [key: string]: MfldFunc }} funcs\n */ funcs=> {for(let key in funcs) \n// @ts-ignore\n MfFn.set(key, funcs[key])},\nconfig:\n/**!\n * - Set Manifold configuration options, including `trans` (DOM transition settings), `fetch` (fetch options), and `profiles` (configuration option overrides that can be set on elements ad-hoc via `mfOverrides`).\n * - Providing the optional `profileName` parameter allows you to save the configuration as a named profile. Otherwise, the profile is saved as the default configuration.\n * @param {MfldOps} new_ops\n * @param {string} [profile_name]\n */ (new_ops, profile_name)=> _setOptions(new_ops, profile_name),\n onTick:\n /**!\n  * - Wait for the next Manifold data update cycle to complete before executing the callback function.\n  * @param {()=> void} cb\n  */ (cb)=> _addToNextTickQueue(cb),\nregister:\n/**!\n * - Register Manifold subscriptions on the DOM. *Optional:* Pass an `HTMLElement` or selector string to scope the registration to a specific element.\n * @param {HTMLElement | string | null} [parent]\n */ (parent)=> {\n    if(typeof parent == \"string\") parent = /** @type {HTMLElement | null}*/(document.querySelector(parent));\n        _registerSubs(parent)\n    },\n};"],"names":["ATTR_PREFIX","_inputNestSplitRx","_nestedValue","obj","path","newval","ptr","key","undefined","length","Map","get","set","_getStorePathFromKey","s","storeName","split","map","sp","isNaN","parseInt","filter","_getOverride","name","el","ops","parse","def","as","override","dataset","profiles","fetch","JSON","_getOpOverrides","overrides","responseType","trans","dur","swap","class","smartTransition","_parseFunction","data","condition","datakey","stores","fn","trim","slice","storeList","replace","func","globalThis","MfFn","match","includes","Function","spacer","workArray","cancelAnimationFrame","_nextTickQueue","spacerHeight","tick","requestAnimationFrame","setTimeout","_scheduleUpdate","update","push","_runUpdates","_addSpacer","inEl","wrapper","wrapperHeight","replaceWholeObject","document","createElement","paddingTop","paddingBottom","Element","window","getComputedStyle","style","height","Math","abs","clientHeight","after","_adjustSizing","remove","animate","order","out","relation","in","_applyTransition","prepend","container","cloneNode","getDimensionsAfterUpdate","border","replaceChildren","replaceWith","appendChild","done","dir","refElement","nodeType","Node","TEXT_NODE","text","textContent","newNode","Array","isArray","transClass","classList","add","hooks","dimensions","w","clientWidth","paddingLeft","paddingRight","left","getBoundingClientRect","scrollX","top","scrollY","position","width","margin","transitionDuration","_hashAny","input","from","entries","Set","hash","char","TextEncoder","encode","toString","MfSt","Store","_updater","_subscriptions","_storedHash","_upstreamStores","_downstreamStores","constructor","this","_modify","upstream","S","_store","value","updater","_auto_update","sub","ref","immediate","String","Date","now","random","Promise","async","resolve","newValue","newHash","ds","newVal","found_store","_handleFetch","trigger","fetchOps","href","method","processFunc","ev","e","preventDefault","stopPropagation","target","externals","find","allowed","startsWith","domain","location","origin","body","FormData","toFunc","request","headers","stringify","catch","error","err","console","code","status","onCode","resp","instruction","selector","toReplace","fullMarkup","DOMParser","parseFromString","querySelector","_registerSubs","history","pushState","resolveTxt","resolveFunc","addEventListener","_handleBindSync","output","mode","domSubscription","storeValues","val","parts","setAttribute","dispatchEvent","CustomEvent","propValues","prop","getAttribute","curVal","_ensureTemplate","tagName","newEl","innerHTML","attr","attributes","_iterateSiblings","sib","breakFn","cb","nextElementSibling","_registerConditionStore","conditionChain","upstreamConditionsLen","list","log","_handleConditionals","startElement","endElement","before","hasElse","implElse","end","i","conditionStore","contains","nodeName","sibClone","element","content","children","funcStr","aliases","valueName","keyName","arr","forEach","_iterable","html","replacements","rep","repClean","item","_ops","_commaSepRx","_modes","m","parent","els","querySelectorAll","join","_op_overrides","toLowerCase","action","shouldHaveTriggers","setting","sourceParts","triggers","_paramsInParens","indexOf","funcAndInput","processFuncName","warn","str","matches","Mfld","store","store_name","store_ops","hasOwnProperty","ustore","func_name","funcs","config","new_ops","profile_name","_setOptions","newops","profileName","onTick","register"],"mappings":"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"}