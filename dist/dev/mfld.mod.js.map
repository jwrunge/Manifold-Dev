{"version":3,"file":"mfld.mod.js","sources":["../../src/updates.js","../../src/store.js","../../src/util.js","../../src/fetch.js","../../src/bindsync.js","../../src/conditionals.js","../../src/registrar.js","../../src/index.module.js"],"sourcesContent":["/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\r\n\r\n/**\r\n * @typedef {Object} DomWorkOrder\r\n * @property {HTMLElement} in - The input HTMLElement\r\n * @property {HTMLElement} out - The output HTMLElement\r\n * @property {\"append\" | \"prepend\" | \"swapinner\" | \"swapouter\"} relation - The relation between the input and output elements\r\n * @property {Partial<MfldOps>} ops - The fetch options for the operation\r\n * @property {(el: HTMLElement | null) => void} done - The callback function to be executed when the operation is done\r\n */\r\n\r\n/** @type {(DomWorkOrder | Function)[]} */ let workArray = [];\r\nlet cancelAnimationFrame = false;\r\n/** @type {Map<string, (any | ((any)=> any))>} */\r\n\r\n// Next tick queue\r\n/**\r\n * @type {Function[]}\r\n */\r\nlet _nextTickQueue = [];\r\n\r\n/** @type {HTMLElement | null} */\r\nlet spacer;\r\nlet spacerHeight = \"\";\r\n\r\n// Polyfill requestAnimationFrame\r\nlet tick = globalThis?.requestAnimationFrame || ((fn)=> setTimeout(fn, 0));\r\n\r\nexport function _addToNextTickQueue(fn) {\r\n    if(fn) _nextTickQueue.push(fn);\r\n}\r\n\r\n/** @export @param {(DomWorkOrder | Function)} update */\r\nexport function _scheduleUpdate(update) {\r\n    workArray.push(update);\r\n    if(!cancelAnimationFrame) {\r\n        cancelAnimationFrame = true;\r\n        tick(_runUpdates);\r\n    }\r\n}\r\n\r\nfunction _addSpacer(inEl, wrapper, wrapperHeight, replaceWholeObject = false, ops) {\r\n    if(!ops.trans?.smartTransition ?? true) return;\r\n    //Conserve parent size\r\n    spacer = document.createElement(\"div\");\r\n    \r\n    let { paddingTop, paddingBottom } = wrapper instanceof Element ? window.getComputedStyle(wrapper) : { paddingTop: 0, paddingBottom: 0 };\r\n    spacerHeight = spacer.style.height = `calc(${(Math.abs(wrapperHeight - (inEl?.clientHeight || 0)))}px - ${paddingTop} - ${paddingBottom})`;\r\n\r\n    wrapper?.after(spacer);\r\n}\r\n\r\nfunction _adjustSizing(inEl, ops) {\r\n    if(!ops.trans?.smartTransition ?? true) return;\r\n    let dur = (ops?.trans?.dur?.[0] || ops?.trans?.dur || 600)/2\r\n\r\n    _scheduleUpdate(()=> {\r\n        spacer?.remove();\r\n        inEl?.animate?.([\r\n            { height: spacerHeight },\r\n            { height: `${inEl.clientHeight || 0}px` }\r\n        ], dur);\r\n    });\r\n}\r\n\r\nfunction _runUpdates() {\r\n    cancelAnimationFrame = false;\r\n    \r\n    /**\r\n    * @type {DomWorkOrder[]}\r\n    */\r\n    for(let order of workArray) {\r\n        if(typeof order == \"function\") (/** @type {Function} */ order)();\r\n        else {\r\n            let wrapperHeight = order.out ? order.out.clientHeight : 0;\r\n\r\n            // Prepend\r\n            if(order.relation == \"prepend\") {\r\n                _addSpacer?.(order.in, order.out, wrapperHeight, false, order.ops);\r\n\r\n                //Prepend\r\n                _applyTransition(order.in, \"in\", order.ops, ()=> {\r\n                    if(order.in) order.out?.prepend(order.in);\r\n                    _adjustSizing?.(order.in, order.ops);\r\n                });\r\n            }\r\n            // Remove old children\r\n            else {\r\n                if([\"swapinner\", \"swapouter\"].includes(order.relation)) {\r\n                    //Remove old children before appending (if swapping children)\r\n                    let container = /** @type {HTMLElement}*/(order.out?.cloneNode(true));\r\n\r\n                    order.out?.after(container);\r\n                    let getDimensionsAfterUpdate = order.relation == \"swapinner\" ? true : false;\r\n\r\n                    if(order.relation == \"swapinner\") {\r\n                        container.style.border = \"none\";\r\n                        order.out.replaceChildren();\r\n                    }\r\n\r\n                    // Transition old children out\r\n                    _applyTransition(container, \"out\", order.ops, undefined, order.out, getDimensionsAfterUpdate);\r\n                }\r\n\r\n                _addSpacer?.(order.in, order.out, wrapperHeight, false, order.ops);\r\n\r\n                // Transition incoming element and append\r\n                _applyTransition(order.in, \"in\", order.ops, ()=> {\r\n                    if(order.in) {\r\n                        if(order.relation == \"swapouter\") order.out?.replaceWith(order.in)\r\n                        else order.out?.appendChild(order.in);\r\n                    }\r\n                    _adjustSizing?.(order.in, order.ops);\r\n                });\r\n            }\r\n\r\n            order.done?.(order.in);\r\n        }\r\n    }\r\n\r\n    //Handle queued nextTick functions\r\n    _nextTickQueue.forEach(fn=> fn());\r\n    _nextTickQueue = [];\r\n    workArray = [];\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el \r\n * @param {\"in\" | \"out\"} dir \r\n * @param {Partial<MfldOps>} ops \r\n * @param {Function} [fn] \r\n * @param {HTMLElement} [refElement]\r\n * @param {boolean} [getDimensionsAfterUpdate]\r\n * @returns \r\n */\r\nfunction _applyTransition(el, dir, ops, fn, refElement, getDimensionsAfterUpdate = false) {\r\n    //Handle text nodes\r\n    if(el?.nodeType == Node.TEXT_NODE) {\r\n        let text = el.textContent;\r\n        let newNode = document?.createElement(\"div\");\r\n        newNode.textContent = text;\r\n        el.replaceWith(newNode);\r\n        el = newNode;\r\n    }\r\n\r\n    if(el) {\r\n        let dur = Array.isArray(ops.trans?.dur) ? ops.trans?.dur[dir == \"in\" ? 0 : 1] || ops.trans?.dur[0] : ops.trans?.dur || 0;\r\n\r\n        //Initiate transition\r\n        let transClass = ops?.trans?.class || \"mf-trans\";\r\n        el?.classList?.add(transClass);\r\n        ops.trans?.hooks?.[`${dir}-start`]?.(el);\r\n\r\n        //Wait to apply class\r\n        if(dir == \"out\") {\r\n            // Set dimensions\r\n            if(!refElement) refElement = el;\r\n            if(!refElement) return;\r\n            let dimensions = {};\r\n            if((ops.trans?.smartTransition ?? true) && getDimensionsAfterUpdate == false) {\r\n                let style = getComputedStyle(refElement);\r\n                dimensions.w = `calc(${(refElement).clientWidth}px - ${style.paddingLeft} - ${style.paddingRight})`;\r\n                dimensions.left = `calc(${refElement.getBoundingClientRect().left}px + ${window.scrollX}px)`;\r\n                dimensions.top = `calc(${refElement.getBoundingClientRect().top}px + ${window.scrollY}px)`;\r\n            }\r\n\r\n            _scheduleUpdate(()=> {\r\n                if(ops.trans?.smartTransition ?? true) {\r\n                    if(getDimensionsAfterUpdate && refElement) {\r\n                        let style = getComputedStyle(refElement);\r\n                        dimensions.w = `calc(${(refElement).clientWidth}px - ${style.paddingLeft} - ${style.paddingRight})`;\r\n                        dimensions.left = `calc(${refElement.getBoundingClientRect().left}px + ${window.scrollX}px)`;\r\n                        dimensions.top = `calc(${refElement.getBoundingClientRect().top}px + ${window.scrollY}px)`;\r\n                    }\r\n                    \r\n                    el.style.position = \"fixed\";\r\n                    el.style.width = dimensions.w;\r\n                    el.style.left = dimensions.left;\r\n                    el.style.top = dimensions.top;\r\n                    el.style.margin = \"0\";\r\n                }\r\n\r\n                if(dur) el.style.transitionDuration = `${dur}ms`;\r\n                el.classList?.add(\"out\");\r\n            })\r\n        }\r\n        //If dir == in\r\n        else {\r\n            el?.classList?.add(\"in\");\r\n            if(dur) el.style.transitionDuration = `${dur}ms`;\r\n            fn?.();\r\n            setTimeout(()=> {\r\n                _scheduleUpdate(()=> {\r\n                    setTimeout(()=> _scheduleUpdate(()=> el?.classList?.remove(dir)), 0);\r\n                });\r\n            }, ops.trans?.swap || 0);\r\n        }\r\n        \r\n        setTimeout(()=> {\r\n            _scheduleUpdate(()=> {\r\n                //Wrapup\r\n                if(dir == \"out\") el?.remove();\r\n                el?.classList?.remove(transClass);\r\n                ops.trans?.hooks?.[`${dir}-end`]?.(el);\r\n            });\r\n        }, \r\n        dur + (dir == \"in\" ? ops.trans?.swap || 0 : 0));\r\n    }\r\n}","/** \n * @template T\n * @typedef {import(\"./index.module.js\").UpdaterFunction<T>} UpdaterFunction \n */\n/** \n * @template T\n * @typedef {import(\"./index.module.js\").StoreOptions<T>} StoreOptions \n */\n\nimport { _scheduleUpdate } from \"./updates.js\";\n\n/**\n * @callback SubFunction\n * @param {any} value\n * @param {string} [ref]\n * @returns {void}\n */\n\n/**\n * @param {any} input \n * @returns {any}\n */\nfunction _hashAny(input) {\n    if(!input) return 0;\n    if(typeof input == 'number') return input;\n    if(input === true) return 1;\n\n    if(input instanceof Map) return _hashAny(Array.from(input.entries()));\n    else if(input instanceof Set) return _hashAny(Array.from(input));\n\n    let hash = 0;\n    for(let char of new TextEncoder().encode(\n        typeof input == 'string' ? input : input?.toString() || \"\"\n    )) \n        hash = ((hash << 5) - hash) + char;\n    return hash;\n}\n\n//Static\n/** @type {Map<string, Store<any>>} */ if(!globalThis.MfSt) globalThis.MfSt = new Map();\n/** @type {Map<string, Function>} */ if(!globalThis.MfFn) globalThis.MfFn = new Map();\n\n/**\n * @template T\n */\nexport class Store {\n    /** @type {UpdaterFunction<T> | undefined} */ _updater = undefined;\n    /** @type {Map<string, SubFunction>} */ _subscriptions = new Map();\n    /** @type {string | undefined} */ _storedHash = undefined;\n    /** @type {Set<Store<any>>} */ _upstreamStores;\n    /** @type {Set<Store<any>>} */ _downstreamStores = new Set();\n\n    /**\n     * @param {string} name\n     * @param {StoreOptions<T>} [ops]\n     */\n    constructor(name, ops) {\n        return this._modify(name, ops);        \n    }\n\n    /**\n     * @param {string} name\n     * @param {StoreOptions<T>} [ops]\n     */\n    _modify(name, ops) {\n        this.name = name;\n        // @ts-ignore\n        MfSt.set(name, this);\n        \n        this._upstreamStores = new Set(ops?.upstream?.map(s=> _store(s)) || []);\n        this._upstreamStores.forEach(s=> s?._downstreamStores?.add(this));\n        this.value = ops?.value;\n        this._updater = ops?.updater;\n\n        return this;\n    }\n\n    /**\n     * @param {(T)=> void} sub\n     * @param {string | undefined} [ref]\n     * @param {boolean} [immediate]\n     */\n    sub(sub, ref, immediate = true) {\n        this._subscriptions.set(ref || String(Date.now() + Math.random()), sub);\n        if(immediate) sub?.(this.value);\n    }\n\n    //Update (manual or automated -- cascades downstream on batch updates)\n    /**\n    * @template T\n    * @param {T | ((T)=> T | Promise<T>)} value\n    */\n    async update(value) {\n        return new Promise(async (resolve)=> {\n            //Apply new value   \n            let newValue = (typeof value == \"function\" ? /** @type {Function} */(await value)?.(this.value) : value);\n            let newHash = _hashAny(newValue);\n            \n            if(newHash !== this._storedHash) {\n                this.value = newValue;\n                this._storedHash = newHash;\n\n                // Add this store to the work order\n                for(let ds of this._downstreamStores) await ds._auto_update();\n\n                // Wait for next animation frame to return the value\n                _scheduleUpdate(()=> {\n                    for(let [ref, sub] of this?._subscriptions || []) sub?.(this.value, ref);\n                    resolve(this.value);\n                });\n            }\n            else resolve(this.value);\n        });\n    }\n\n    async _auto_update() {\n        let newVal = await this._updater?.(\n            Array.from(this._upstreamStores)?.map(S => S?.value) || [], \n            /** @type {T} */(this?.value)\n        );\n\n        await this.update(newVal === undefined ? this.value : newVal);\n    }\n}\n\n/**\n * STORE STATIC METHODS\n */\n/**\n * @template T\n * @param {string} name - The name of the store\n * @param {StoreOptions<T> | T} [ops] - Options to update the store\n * @returns {Store<T>}\n */\nexport function _store(name, ops) {\n    // @ts-ignore\n    let found_store = MfSt.get(name);\n    if(ops) {\n        if(found_store) {\n            return found_store._modify(name, ops);\n        }\n        return new Store(name, ops);\n    }\n    return found_store || new Store(name, /** @type {StoreOptions<T>}*/(ops));\n}","export let ATTR_PREFIX = \"mf\";\r\nexport let _inputNestSplitRx = /[\\.\\[\\]\\?]{1,}/g;\r\n\r\n/**\r\n * Get or set nested store values\r\n * @param {any} obj \r\n * @param {(string | number)[]} path \r\n * @param {any} [newval] \r\n * @returns \r\n */\r\nexport function _nestedValue(obj, path, newval) {\r\n    let ptr = obj;\r\n\r\n    for(let key of path) {\r\n        //Dynamically letruct object if it doesn't exist\r\n        if(ptr == undefined) ptr = typeof key == \"number\" ? [] : {};\r\n\r\n        //Set or get value\r\n        if(newval == undefined || path[path.length - 1] !== key) ptr = ptr instanceof Map ? ptr?.get(key) : ptr?.[key];\r\n        else ptr instanceof Map ? ptr.set(key, newval) : ptr[key] = newval;\r\n    }\r\n\r\n    return ptr;\r\n}\r\n\r\nexport function _getStorePathFromKey(s) {\r\n    let [storeName, ...path] = (s)?.split(_inputNestSplitRx);\r\n    return [storeName, path?.map(sp=> !isNaN(parseInt(sp)) ? parseInt(sp) : sp).filter(sp=> sp) || []];\r\n}\r\n\r\n/**\r\n * Get or set nested store values\r\n * @param {import(\"./index.module\").MfldOps} ops\r\n * @param {HTMLElement} el\r\n * @returns {import(\"./index.module\").MfldOps}\r\n */\r\nexport function _getOpOverrides(ops, el) {\r\n    let overrides = el.dataset[`${ATTR_PREFIX}overrides`] || \"{}\";\r\n    let overrideOps = ops.profiles?.[overrides]?.fetch || JSON.parse(overrides);\r\n\r\n    /** @type {import(\"./index.module\").MfldOps} */\r\n    return overrideOps ? {\r\n        ...ops,\r\n        ...overrideOps,\r\n    } : ops;\r\n}\r\n\r\n/**\r\n * @param {{el: HTMLElement, datakey: string} | string} data \r\n * @returns {{ storeList?: string[], func?: Function, storeName?: string}}\r\n */\r\nexport function _parseFunction(data) {\r\n    let condition = \"\";\r\n    let storeName = \"\";\r\n    if(typeof data === \"string\") {\r\n        condition = data;\r\n    }\r\n    else {\r\n        condition = data?.el?.dataset?.[data?.datakey] || \"\";\r\n        storeName = condition;\r\n\r\n        if(!condition && data?.el?.dataset?.[`${ATTR_PREFIX}else`] !== undefined) {\r\n            condition = \"return true\";\r\n            storeName = `ELSE:${data?.el?.dataset?.[data?.datakey] || \"\"}`;\r\n        }\r\n    }\r\n\r\n    if(!condition) return {};\r\n\r\n    let [stores, fn] = condition?.split(\"=>\")?.map(s=> s.trim()) || [\"\", \"\"];\r\n    if(!fn) {\r\n        fn = stores.slice();\r\n        stores = \"\";\r\n    }\r\n\r\n    // Set up function to evaluate store values\r\n    let storeList = stores?.split(\",\")?.map(s=> s.replace(/[()]/g, \"\").trim());\r\n    // @ts-ignore\r\n    let func = globalThis[fn] || MfFn?.get(fn) || new Function(...storeList, fn);\r\n\r\n    return { storeList, func, storeName };\r\n}","import { _getOpOverrides, ATTR_PREFIX } from \"./util.js\";\r\nimport { _scheduleUpdate } from \"./updates\";\r\nimport { _registerSubs } from \"./registrar.js\";\r\n\r\n/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\r\n\r\n/**\r\n * @param {HTMLElement} el \r\n * @param {string} trigger \r\n * @param {MfldOps} _ops\r\n * @param {string} href\r\n * @param {string} [method] \r\n * @param {BodyInit | null} [input]\r\n */\r\nexport function _handleFetch(el, trigger, _ops, href, method, input) {\r\n    /**\r\n     * @param {Event} [e]\r\n     */\r\n    let ev = async e=> {  \r\n        e?.preventDefault();\r\n        e?.stopPropagation();\r\n\r\n        let fetchOps = _getOpOverrides(_ops, el);\r\n\r\n        // Set from target element if relevant; fall back to \"get\"\r\n        if(!method) method = /** @type {any}*/(e?.target)?.method || \"get\";\r\n\r\n        // if([\"click\", \"submit\"].includes(trigger) || [\"A\", \"FORM\"].includes(target?.nodeName)) {\r\n        //     history.pushState(\r\n        //         {fetchData, elId: el.id}, \r\n        //         \"\", \r\n        //         target?.href || target?.action || \"\"\r\n        //     );\r\n        // }\r\n    \r\n        //Make sure we're allowed to fetch\r\n        let externalPermissions = fetchOps?.fetch?.externals?.find(allowed=> href?.startsWith(allowed.domain)) || \r\n            !href.match(/^https?:\\/\\//) || href.includes(location.origin) ? {\r\n                scripts: true,\r\n                styles: true,\r\n        } : undefined;\r\n\r\n        //Fetch data\r\n        let data = await fetch(href, {\r\n            ...(fetchOps?.fetch?.request || {}),\r\n            method,\r\n            body: typeof input == \"string\" ? input : JSON.stringify(input),\r\n        })\r\n        .catch(error=> {\r\n            fetchOps?.fetch?.err?.(error);\r\n        });\r\n\r\n        //Handle onCode callback\r\n        let code = data?.status;\r\n        if(code && fetchOps?.fetch?.onCode?.(code, data) == false) return;\r\n\r\n        //Return JSON or text in callback\r\n        let resp = await data?.[fetchOps?.fetch?.type || \"text\"]();\r\n        fetchOps?.fetch?.cb?.(resp);\r\n\r\n        // Handle resolutions\r\n        for(let instruction of [\"append\", \"prepend\", \"swapinner\", \"swapouter\"]) {\r\n            let ds = el.dataset[`${ATTR_PREFIX}${instruction}`];\r\n            if(ds === undefined) continue;\r\n            let [selector, toReplace] = ds?.split(\"->\").map(s=> s.trim()) || [];\r\n\r\n            //Extract content and schedule a DOM update\r\n            let fullMarkup = (new DOMParser())?.parseFromString?.(resp, 'text/html');\r\n            if(fullMarkup) {\r\n                _scheduleUpdate({\r\n                    in: /** @type {HTMLElement} */ (fullMarkup.querySelector(selector || \"body\")),\r\n                    out: /** @type {HTMLElement} */ (toReplace ? document.querySelector(toReplace) : el),\r\n                    relation: /** @type {\"append\" | \"prepend\" | \"swapinner\" | \"swapouter\"}*/(instruction),\r\n                    ops: fetchOps,\r\n                    done: (el)=> {\r\n                        _registerSubs(el)\r\n                    },\r\n                })\r\n            }\r\n        }\r\n\r\n        if(el.dataset?.[`${ATTR_PREFIX}resolve`]) {\r\n            alert(\"RESOLVING\")\r\n        }\r\n\r\n            // //Clear existing scripts/styles\r\n            // for(let s of [pageScripts, pageStyles]) {\r\n            //     let elements = s.get(fullMarkup) || [];\r\n            //     elements.forEach(el => el.remove());\r\n            //     s.set(fullMarkup, []);\r\n            // }\r\n\r\n            // //Get scripts and styles\r\n            // let seek: string[] = ops.allowScripts ? [\"scripts\"] : [];\r\n            // if(ops.allowStyles) seek.push(\"style\");\r\n            // if(seek.length) {\r\n            //     let globls: NodeListOf<HTMLScriptElement | HTMLStyleElement> = fullMarkup.querySelectorAll(seek.join(\",\"));\r\n            //     for(let el of globls) {\r\n            //         let isScript = el instanceof HTMLScriptElement;\r\n            //         let source = isScript ? pageScripts : pageStyles;\r\n\r\n            //         if(isScript ? ops.allowScripts : ops.allowStyles){\r\n            //             if(!source.has(parent)) source.set(parent, []);\r\n            //             source.get(parent)?.push(el as any);\r\n            //         }\r\n            //         else if(isScript) el.parentNode?.removeChild(el);\r\n            //     }\r\n            // }\r\n    }\r\n\r\n    if(trigger == \"$mount\") ev();\r\n    else el.addEventListener(trigger, ev);\r\n}","import { _store } from \"./store\";\r\nimport { _scheduleUpdate } from \"./updates\";\r\nimport { _getStorePathFromKey, _inputNestSplitRx, _nestedValue, ATTR_PREFIX } from \"./util\";\r\n\r\nexport function _handleBindSync(el, input, output, trigger, mode, processFunc) {\r\n    /**\r\n     * HANDLE MF-BIND - inputs are stores, output is element property\r\n     */\r\n    if(mode == `${ATTR_PREFIX}bind`) {\r\n        let stores = input.map(_getStorePathFromKey);\r\n        let domSubscription = ()=> {\r\n            _scheduleUpdate(()=> {\r\n                let storeValues = stores.map(s=> _nestedValue(_store(s[0])?.value, s[1]));\r\n                let val = processFunc?.(...storeValues, el) ?? storeValues[0];\r\n                if(output && val !== undefined) el[output] = val;\r\n\r\n                //Make sure to update dependent stores on value update\r\n                el.dispatchEvent(new CustomEvent(trigger));\r\n            });\r\n        }\r\n    \r\n        //Add subscription - run whenever store updates\r\n        for(let s of stores) _store(s?.[0]|| \"\")?.sub(domSubscription, el.id);\r\n    }\r\n\r\n    else {\r\n        /**\r\n         * HANDLE MF-SYNC - inputs are element properties, output is a store\r\n         */\r\n        if(mode == `${ATTR_PREFIX}sync`) {\r\n            let [storeName, path] = _getStorePathFromKey(output || \"\");\r\n            let ev = ()=> {\r\n                let propValues = input.map(prop=> {\r\n                    prop = prop.trim();\r\n                    return el[prop] ?? el.getAttribute(prop) ?? el.dataset[prop] ?? undefined;\r\n                });\r\n\r\n                let value = processFunc?.(...propValues) ?? propValues[0];\r\n                \r\n                if(storeName && value !== undefined) {\r\n                    _store(storeName)?.update?.(curVal=> {\r\n                        return path?.length ? _nestedValue(curVal, path, value) : value\r\n                    });\r\n                }\r\n            }\r\n            if(trigger == \"$mount\") ev();\r\n            else el.addEventListener(trigger, ev);\r\n        }\r\n    }\r\n}","import { _registerSubs } from \"./registrar\";\nimport { _store } from \"./store\";\nimport { _scheduleUpdate } from \"./updates\";\nimport { _getOpOverrides, _parseFunction, ATTR_PREFIX } from \"./util\";\n\n/**\n * Handle conditional and loop elements\n * @param {HTMLElement} el \n * @param {string} mode \n * @param {import(\"./index.module\").MfldOps} _ops \n */\nexport function _handleConditionals(el, mode, _ops) {\n    if(mode == `${ATTR_PREFIX}if`) {\n        let ops = _getOpOverrides(_ops, el);\n        let rootElement = document.createElement(\"div\");\n        rootElement.classList.add(\"mfld-active-condition\");\n        el.before(rootElement);\n\n        // Set up conditions\n        let siblingPtr = el;\n        let conditionChain = [];\n        while(siblingPtr) {\n            if(!siblingPtr) break;\n            let { storeList, func, storeName } = _parseFunction({\n                el: siblingPtr, \n                datakey: conditionChain.length ? `${ATTR_PREFIX}elseif`: mode\n        });\n            if(!storeList && !func) break;\n\n            // Make sure this is a template\n            if(siblingPtr.tagName != \"TEMPLATE\") {\n                let newEl = document.createElement(\"template\");\n                newEl.innerHTML = siblingPtr.innerHTML;                \n                for(let attr of siblingPtr.attributes) {\n                    newEl.setAttribute(attr.name, attr.value);\n                }\n                siblingPtr.replaceWith(newEl);\n                siblingPtr = newEl;\n\n                // If not, it's default content\n                rootElement.innerHTML = siblingPtr.innerHTML;\n            }\n\n            // Register new store (to prevent excess evaluations)\n            let upstreamConditionsLen = conditionChain.length;\n            let conditionStore = _store(storeName || \"\", {\n                upstream: [...storeList || [], ...conditionChain],\n                updater: (list)=> {\n                    if(upstreamConditionsLen) {\n                        for(let condition of list.slice(-upstreamConditionsLen) || []) {\n                            if(condition) return false;\n                        }\n                    }\n                    return func?.(...list.slice(0, -1));\n                }\n            });\n\n            conditionChain.push(conditionStore.name);\n\n            let siblingClone = /** @type {HTMLElement}*/(siblingPtr.cloneNode(true));\n            conditionStore?.sub(val=> {\n                if(!val) return;\n                let sib = document.createElement(\"div\");\n                sib.innerHTML = siblingClone.innerHTML;\n                if(siblingClone?.tagName == \"TEMPLATE\") {\n                    _scheduleUpdate({\n                        in: sib,\n                        out: rootElement,\n                        relation: \"swapinner\",\n                        ops,\n                        done: ((el) => _registerSubs(el)),\n                    })\n                }\n            });\n\n            siblingPtr = /** @type {HTMLElement} */(siblingPtr?.nextElementSibling);\n        }\n    }\n    else {\n        alert(\"Not set up for loops yet\")\n    }\n}","import { _store } from \"./store.js\";\nimport { _scheduleUpdate } from \"./updates.js\";\nimport { _parseFunction, ATTR_PREFIX } from \"./util.js\";\nimport { _handleFetch } from \"./fetch.js\";\nimport { _handleBindSync } from \"./bindsync.js\";\nimport { _handleConditionals } from \"./conditionals.js\";\n/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\n\n/** @type {Partial<MfldOps>} */\nlet _ops = {};\nlet _commaSepRx = /, {0,}/g;\nlet _elIdx = 0;\nlet _modes = [\"bind\", \"sync\", \"if\", \"get\", \"head\", \"post\", \"put\", \"delete\", \"patch\"].map(m=> `${ATTR_PREFIX}${m}`);\nlet pageScripts = new WeakMap();\nlet pageStyles = new WeakMap();\n\n// globalThis.addEventListener(\"popstate\", (e)=> {\n//     let el = document?.getElementById(e.state?.elId);\n//     if(e?.state?.fetchData) {\n//         _fetchHttp(\n//             \"get\", \n//             \"\",\n//             e.state.fetchData,\n//             el,\n//             el=> {if(el) _registerSubs(el)}\n//         );\n//     }\n// });\n\n/**!\n * @param {Partial<MfldOps>} newops \n * @param {string} [profileName] \n */\nexport function _setOptions(newops, profileName) {\n    if(profileName) _ops.profiles = { ..._ops.profiles, [profileName]: newops };\n    else _ops = { ..._ops, ...newops };\n}\n\n//Register subscriptions on the DOM (scopable in case an update needs run on a subset of the DOM)\n/**\n * @param {HTMLElement | null} [parent] \n */\nexport function _registerSubs(parent) {\n    /** @type {NodeListOf<HTMLElement> | []} */\n    let els = (parent || document.body).querySelectorAll(\n        `[data-${_modes.join(`],[data-`)}]${_ops.fetch?.auto != false ? \",a\" : \"\"}`\n    ) || [];\n\n    for(let el of els) {\n        /** @type {HTMLElement} */\n        if(!el.id) el.id = `${_elIdx++}`;\n\n        //Loop over all data attributes (modes)\n        for(let mode in el.dataset) {\n            /**\n             * HANDLE CONDITIONALS AND LOOPS\n             */\n            if([`${ATTR_PREFIX}if`, `${ATTR_PREFIX}each`].includes(mode)) {\n                _handleConditionals(el, mode, _ops);\n                continue;\n            }\n\n            if(!_modes.includes(mode)) continue;\n            let shouldHaveTriggers = ![`${ATTR_PREFIX}bind`].includes(mode);\n            let err_detail = `(#${el.id} on ${mode})`;\n\n            //Loop over provided settings\n            el.dataset?.[mode]?.split(\";\").forEach(setting=> {\n                //Break out settings\n                let [sourceParts, output] = setting?.split(\"->\")?.map(s=> s.trim()) || [];\n                let triggers = shouldHaveTriggers ? _paramsInParens(sourceParts.slice(0, sourceParts.indexOf(\")\"))) : [];\n                let funcAndInput = shouldHaveTriggers ? sourceParts.slice(sourceParts.indexOf(\")\") + 1) : sourceParts;\n                let processFuncName = funcAndInput.includes(\"=>\") ? funcAndInput : funcAndInput.includes(\"(\") ? funcAndInput.match(/^[^\\(]{1,}/)?.[0] || \"\" : \"\";\n                let input = processFuncName ? _paramsInParens(funcAndInput.slice(0, (funcAndInput.indexOf(\")\") || -2) + 1)) : funcAndInput.split(_commaSepRx)?.map(s=> s.trim());\n\n                //Handle errors\n                if(shouldHaveTriggers && !triggers?.length) return console.error(`No trigger: ${err_detail}.`);\n\n                /** @type {Function | undefined} */\n                let processFunc = _parseFunction(processFuncName)?.func;\n                if(processFuncName) {\n                    if(!processFunc) console.warn(`\"${processFuncName}\" not registered: ${err_detail}`);\n                }\n                else if(input.length > 1) console.warn(`Multiple inputs without function: ${err_detail}`);\n\n                //Loop over triggers\n                if(!triggers?.length) triggers = [\"\"]\n                for(let trigger of triggers) {\n                    if(mode.match(/bind|sync/)) _handleBindSync(el, input, output, trigger, mode, processFunc);\n                    else _handleFetch(el, trigger, _ops, input[0], mode.replace(ATTR_PREFIX, \"\"), output);\n                }\n            }); //End loop settings\n        }   //End loop dataset modes\n    };  //End loop elements\n}\n\n/**\n * @param {string} str \n * @returns \n */\nfunction _paramsInParens(str) {\n    if(str?.includes(\"(\")) {\n        let matches = str.match(/[^\\(\\)]{1,}/g);\n        str = matches?.[matches.length - 1] || \"\";\n    }\n    return str?.split(_commaSepRx)?.map(s=> s.trim()) || [];\n}","import { _store } from \"./store.js\";\nimport { _addToNextTickQueue } from \"./updates.js\";\nimport { _registerSubs, _setOptions } from \"./registrar.js\";\n\n/**! @typedef {\"in-start\"|\"in-end\"|\"out-start\"|\"out-end\"} HookKey*/\n\n/**!\n * @typedef {object} ExternalOptions\n * @property {string} domain - The domain name these settings apply to\n * @property {boolean} [scripts] - Allow scripts from this domain to execute\n * @property {boolean} [styles] - Allow styles from this domain to apply\n */\n\n/**!\n * @typedef {object} FetchOptions\n * @property {RequestInit} [request] - Fetch request options\n * @property {\"json\"|\"text\"} [type] - Response type (default: \"text\")\n * @property {(val: any)=> void} [cb] - Callback function - run on successful fetch; *val* is the un-parsed response body\n * @property {(err: Error)=> void} [err] - Error callback - run on fetch error\n * @property {(code: number, data: void | Response)=> boolean | void} [onCode] - Callback function - run on fetch response code; return `false` to prevent further processing\n * @property {boolean} [auto] - Automatically fetch content on page load\n * @property {ExternalOptions[]} [externals] - External domain fetch settings\n */\n\n/**!\n * @typedef {object} TransitionOptions\n * @property {string} [class] - CSS class applied to transitions (default: `mfTrans`)\n * @property {[number, number] | number} [dur] - Transition duration: [in, out] or single value (in ms); default: 300\n * @property {number} [swap] - Swap delay (in ms) - applied between one element's outro start and the replacement's intro start; default: 0\n * @property {boolean} [smartTransition] - Enable smart transitions (default: true)\n * @property {{ [key in HookKey]?: (el: HTMLElement)=> void }} [hooks] - Transition hooks\n */\n\n/**!\n * Manifold options for `fetch`, `trans`, and `profiles`.\n * @typedef {Object} MfldOps\n * @property {{ [ key: string ]: Partial<MfldOps> }} [profiles] - Fetch profiles assignable to elements\n * @property {FetchOptions} [fetch] - Fetch options - see https://google.com\n * @property {TransitionOptions} [trans] - Transition settings - see https://google.com\n */\n\n/**!\n * @template T\n * @callback UpdaterFunction\n * @param {Array<any>} upstreamValues\n * @param {T} value\n * @returns {T | Promise<T>}\n */\n\n/**!\n * @template T\n * @typedef {Object} StoreOptions\n * @property {T} [value]\n * @property {Array<string>} [upstream]\n * @property {UpdaterFunction<T>} [updater]\n */\n\n/**!\n * @template T\n * @typedef Store\n * @prop {T} value - The store's current value (read only)\n * @prop {function(T | function(T):T|Promise<T>|undefined):T|Promise<T>|undefined} update - Update the store's current value\n * @prop {function(function(T):void,string):void} sub - Add a subscription function to the store\n */\n\n/**!\n * @typedef {Function} MfldFunc\n * @param {any} val\n * @param {HTMLElement} [el]\n */\n\n/**!\n * The global Manifold interface.\n */\nexport let Mfld = {\nstore: \n/**!\n* - Create or overwrite a _typed_ global Manifold store by passing `store_ops` (`MfldOps`) -> *returns `Store\\<T\\>`* \n* - Retrieve an untyped reference to the store specified by name by omitting `store_ops` -> *returns `Store\\<any\\>`*\n* @template T\n* @param {string} store_name\n* @param {StoreOptions<T> | T} store_ops\n* @return {Store<T>}\n*/ (store_name, store_ops)=> {\n    if(!store_ops?.hasOwnProperty(\"value\") && !store_ops?.hasOwnProperty(\"updater\")) {\n        store_ops = /** @type {StoreOptions<T>}*/({ value: /** @type {T}*/store_ops });\n    }\n    return /**@type {Store<T>}*/(_store(store_name, /**@type {StoreOptions<T>}*/store_ops))\n},\nustore: \n/**!\n* - Create or overwrite an untyped global Manifold store by passing `store_ops` (`MfldOps`) -> *returns `Store\\<any\\>`* \n* - Retrieve an untyped reference to the store specified by name by omitting `store_ops` -> *returns `Store\\<any\\>`*\n* @param {string} store_name\n* @param {StoreOptions<any> | any} store_ops\n* @return {Store<any>}\n*/ (store_name, store_ops)=> /**@type {Store<any>}*/(_store(store_name, store_ops)),\nget:\n/**!\n * - Retrieve a Manifold store by name. *returns `Store\\<any\\>`*\n * @param {string} store_name\n * @return {Store<any>}\n */ (store_name)=> /**@type {Store<any>}*/(_store(store_name)),\nfunc: \n/**!\n * - Retrieve a Manifold function by name. *val* refers to the store's current value; *el* refers to the element that triggered the update (if applicable). *returns `MfldFunc`*\n * - *Note:* Functions retrived using this method cannot infer the type of the store's value and is therefore **not** type-checked. It is preferable to keep a reference to the function if you need to preserve type information.\n * @param {string} func_name\n * @return {MfldFunc}\n */ (func_name)=> /** @type {(val: any, el?: HTMLElement)=> void}*/(\n// @ts-ignore\n MfFn?.get(func_name)),\nfuncs: \n/**!\n * - Add functions to the Manifold function registry in key-value pairs.\n * - Functions must be registered in order to be accessible to HTML elements via `mfBind`, `mfSync`, and `mfResolve`. \n * - It may still be beneficial to keep a reference to the original function if you need to preserve type information.\n * @param {{ [key: string]: MfldFunc }} funcs\n */ funcs=> {for(let key in funcs) \n// @ts-ignore\n MfFn.set(key, funcs[key])},\nconfig:\n/**!\n * - Set Manifold configuration options, including `trans` (DOM transition settings), `fetch` (fetch options), and `profiles` (configuration option overrides that can be set on elements ad-hoc via `mfOverrides`).\n * - Providing the optional `profileName` parameter allows you to save the configuration as a named profile. Otherwise, the profile is saved as the default configuration.\n * @param {MfldOps} new_ops\n * @param {string} [profile_name]\n */ (new_ops, profile_name)=> _setOptions(new_ops, profile_name),\n onTick:\n /**!\n  * - Wait for the next Manifold data update cycle to complete before executing the callback function.\n  * @param {()=> void} cb\n  */ (cb)=> _addToNextTickQueue(cb),\nregister:\n/**!\n * - Register Manifold subscriptions on the DOM. *Optional:* Pass an `HTMLElement` or selector string to scope the registration to a specific element.\n * @param {HTMLElement | string | null} [parent]\n */ (parent)=> {\n    if(typeof parent == \"string\") parent = /** @type {HTMLElement | null}*/(document.querySelector(parent));\n        _registerSubs(parent)\n    },\n};"],"names":["spacer","workArray","cancelAnimationFrame","_nextTickQueue","spacerHeight","tick","globalThis","requestAnimationFrame","fn","setTimeout","_scheduleUpdate","update","push","_runUpdates","_addSpacer","inEl","wrapper","wrapperHeight","replaceWholeObject","ops","trans","smartTransition","document","createElement","paddingTop","paddingBottom","Element","window","getComputedStyle","style","height","Math","abs","clientHeight","after","_adjustSizing","dur","remove","animate","order","out","relation","in","_applyTransition","prepend","includes","container","cloneNode","getDimensionsAfterUpdate","border","replaceChildren","undefined","replaceWith","appendChild","done","forEach","el","dir","refElement","nodeType","Node","TEXT_NODE","text","textContent","newNode","Array","isArray","transClass","class","classList","add","hooks","dimensions","w","clientWidth","paddingLeft","paddingRight","left","getBoundingClientRect","scrollX","top","scrollY","position","width","margin","transitionDuration","swap","_hashAny","input","Map","from","entries","Set","hash","char","TextEncoder","encode","toString","MfSt","MfFn","Store","_updater","_subscriptions","_storedHash","_upstreamStores","_downstreamStores","constructor","name","this","_modify","set","upstream","map","s","_store","value","updater","sub","ref","immediate","String","Date","now","random","Promise","async","resolve","newValue","newHash","ds","_auto_update","newVal","S","found_store","get","ATTR_PREFIX","_inputNestSplitRx","_nestedValue","obj","path","newval","ptr","key","length","_getStorePathFromKey","storeName","split","sp","isNaN","parseInt","filter","_getOpOverrides","overrides","dataset","overrideOps","profiles","fetch","JSON","parse","_parseFunction","data","condition","datakey","stores","trim","slice","storeList","replace","func","Function","_handleFetch","trigger","_ops","href","method","ev","e","preventDefault","stopPropagation","fetchOps","target","externals","find","allowed","startsWith","domain","match","location","origin","request","body","stringify","catch","error","err","code","status","onCode","resp","type","cb","instruction","selector","toReplace","fullMarkup","DOMParser","parseFromString","querySelector","_registerSubs","alert","addEventListener","_handleBindSync","output","mode","processFunc","domSubscription","storeValues","val","dispatchEvent","CustomEvent","id","propValues","prop","getAttribute","curVal","_handleConditionals","rootElement","before","siblingPtr","conditionChain","tagName","newEl","innerHTML","attr","attributes","setAttribute","upstreamConditionsLen","conditionStore","list","siblingClone","sib","nextElementSibling","_commaSepRx","_elIdx","_modes","m","parent","els","querySelectorAll","join","auto","shouldHaveTriggers","err_detail","setting","sourceParts","triggers","_paramsInParens","indexOf","funcAndInput","processFuncName","console","warn","str","matches","Mfld","store","store_name","store_ops","hasOwnProperty","ustore","func_name","funcs","config","new_ops","profile_name","_setOptions","newops","profileName","onTick","register"],"mappings":"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"}