{"version":3,"file":"dev.mfld.js","sources":["../src/store.js","../src/domUpdates.js","../src/http.js","../src/registrar.js","../src/index.module.js"],"sourcesContent":["/** \n * @template T\n * @typedef {import(\"./index.module.js\").UpdaterFunction<T>} UpdaterFunction \n */\n/** \n * @template T\n * @typedef {import(\"./index.module.js\").StoreOptions<T>} StoreOptions \n */\n\n/**\n * @callback SubFunction\n * @param {any} value\n * @param {string} [ref]\n * @returns {void}\n */\n\n/**\n * @param {any} input \n * @returns {any}\n */\nfunction _hashAny(input) {\n    if(!input) return 0;\n    if(typeof input === 'number') return input;\n    if(input === true) return 1;\n\n    if(input instanceof Map) return _hashAny(Array.from(input.entries()));\n    else if(input instanceof Set) return _hashAny(Array.from(input));\n\n    let hash = 0;\n    for(const char of new TextEncoder().encode(\n        typeof input === 'string' ? input : input?.toString() || \"\"\n    )) \n        hash = ((hash << 5) - hash) + char;\n    return hash;\n}\n\n// Next tick queue\n/**\n * @type {Function[]}\n */\nlet _nextTickQueue = [];\n\nexport function _addToNextTickQueue(fn) {\n    if(fn) _nextTickQueue.push(fn);\n}\n\n//Static\n/** @type {Map<string, Store<any>>} */ if(!globalThis.Mfld_stores) globalThis.Mfld_stores = new Map();\n/** @type {Map<string, Function>} */ if(!globalThis.Mfld_funcs) globalThis.Mfld_funcs = new Map();\n/** @type {Map<string, (any | ((any)=> any))>} */ let _workOrder = new Map();\n/** @type {any} */ let _workCacheTimeout;\n\n/**\n * @template T\n */\nexport class Store {\n    /** @type {UpdaterFunction<T> | undefined} */ #updater = undefined;\n    /** @type {Map<string, SubFunction>} */ _subscriptions = new Map();\n    /** @type {string | undefined} */ _storedHash = undefined;\n    /** @type {Array<string>} */ _downstreamStores = [];\n    /** @type {Array<string>} */ _upstreamStores = [];\n\n    /**\n     * @param {string} name\n     * @param {StoreOptions<T>} [ops]\n     */\n    constructor(name, ops) {\n        return this._modify(name, ops);        \n    }\n\n    /**\n     * @param {string} name\n     * @param {StoreOptions<T>} [ops]\n     */\n    _modify(name, ops) {\n        this.name = name;\n        globalThis.Mfld_stores.set(name, this);\n        \n        this._upstreamStores = ops?.upstream || [];\n        for(let storeName of this._upstreamStores) _store(storeName)?._downstreamStores?.push(this.name || \"\");\n        this.value = ops?.value;\n        this.#updater = ops?.updater;\n\n        return this;\n    }\n\n    /**\n     * @param {string} ref\n     * @param {() => void} sub\n     */\n    _addSub(ref, sub) {\n        this._subscriptions.set(ref, sub);\n        sub?.();\n    }\n\n    /**\n     * @param {(T)=> void} sub\n     */\n    sub(sub) {\n        let ref = \"x\".repeat(5).replace(/./g, c => \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"[Math.floor(Math.random() * 36) ] );\n        this._subscriptions.set(ref, sub);\n        sub?.(this.value);\n    }\n\n    //Update (manual or automated -- cascades downstream)\n    /**\n    * @template T\n    * @param {T | ((T)=> T | Promise<T>)} value\n    */\n    async update(value) {\n        return new Promise((resolve)=> {\n            _workOrder.set(this.name || \"\", value);\n            clearTimeout(_workCacheTimeout);\n            _workCacheTimeout = setTimeout(async ()=> {\n                //Sort this.#workOrder such that dependencies are updated first, duplicate work is filtered out\n                for(let [storeName, _] of _workOrder) {\n                    const store = _store(storeName);\n\n                    //Don't repeat work if an upstream store will cascade\n                    store._downstreamStores.forEach(d=> _workOrder.delete(d));   //Delete downstream stores from work order\n                    store._upstreamStores.forEach(u=> _workOrder.has(u) ? _workOrder.delete(storeName) : true);\n                }\n\n                //Apply changes to top-level workers, then cascade     \n                /** @type {string[]} */ let downstream = [];\n                for(let [storeName, value] of _workOrder) {\n                    let store = _store(storeName);\n                    let newValue = (typeof value == \"function\" ? /** @type {Function} */await (value)?.(store.value) : value);\n\n                    //If the value HAS DEFINITELY CHANGED or is LIKELY TO HAVE CHANGED, update the stored hash and cascade\n                    let newHash = _hashAny(newValue);\n                    if(newHash !== store._storedHash) {\n                        store.value = newValue;\n                        store._storedHash = newHash;\n                        for(let S of store._downstreamStores) downstream.push(S);\n                        for(let [ref, sub] of store._subscriptions) sub?.(store.value, ref);\n                    }\n                }\n\n                //Clear work order and cascade\n                _workOrder.clear();\n                for(let S of downstream) if(_store(S)) await _store(S)._autoUpdate();\n\n                //Handle queued nextTick functions\n                _nextTickQueue.forEach(fn=> fn());\n                _nextTickQueue = [];\n\n                //Resolve value\n                resolve(this.value);\n            }, 0);    //Hack to force running all updates at the end of the JS event loop\n        });\n    }\n\n    //Auto update\n    async _autoUpdate() {\n        await this.update(\n            await (this.#updater?.(\n                this._upstreamStores?.map(store => _store(store)?.value) || [], \n                /** @type {T} */(this?.value)\n            ) || this.value),\n        )\n    }\n}\n\n/**\n * STORE STATIC METHODS\n */\n/**\n * @template T\n * @param {string} name - The name of the store\n * @param {StoreOptions<T> | T} [ops] - Options to update the store\n * @returns {Store<T>}\n */\nexport function _store(name, ops) {\n    let found_store = globalThis.Mfld_stores.get(name);\n    if(ops) {\n        if(found_store) {\n            return found_store._modify(name, ops);\n        }\n        return new Store(name, ops);\n    }\n    return found_store || new Store(name, /** @type {StoreOptions<T>}*/(ops));\n}","import { _store } from \"./store.js\";\r\n/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\r\n\r\n/** @type {{ adjust?: Function, space?: Function, size?: Function } | undefined} */\r\nlet smartOutro = globalThis.smartOutro;\r\n\r\n/**\r\n * @typedef {Object} DomWorkOrder\r\n * @property {HTMLElement} in - The input HTMLElement\r\n * @property {HTMLElement} out - The output HTMLElement\r\n * @property {string} relation - The relation between the input and output elements\r\n * @property {Partial<MfldOps>} ops - The fetch options for the operation\r\n * @property {(el: HTMLElement | null) => void} done - The callback function to be executed when the operation is done\r\n */\r\n\r\n/** @type {(DomWorkOrder | Function)[]} */ let workArray = [];\r\nlet cancelAnimationFrame = false;\r\n\r\n/** @export @param {(DomWorkOrder | Function)} update */\r\nexport function _scheduleDomUpdate(update) {\r\n    workArray.push(update);\r\n    if(!cancelAnimationFrame) {\r\n        cancelAnimationFrame = true;\r\n        globalThis.requestAnimationFrame?.(_runDomUpdates);\r\n    }\r\n}\r\n\r\nfunction _runDomUpdates() {\r\n    cancelAnimationFrame = false;\r\n    \r\n    /**\r\n    * @type {DomWorkOrder[]}\r\n    */\r\n    for(let order of workArray) {\r\n        if(typeof order === \"function\") (/** @type {Function} */ order)();\r\n        else {\r\n            // Remove old children\r\n            if([\">\", \"+\"].includes(order.relation)) {\r\n                if(order.relation == \">\") {\r\n                    //Remove old children before appending\r\n                    let container = globalThis.document?.createElement(\"div\");\r\n                    for(let child of Array.from(order.out?.childNodes || [])) {\r\n                        container.appendChild(child);\r\n                    }\r\n                    order.out?.replaceChildren(container);\r\n                    _applyTransition(container, \"out\", order.ops);\r\n                }\r\n\r\n                smartOutro?.space?.(order.in, order.out);\r\n\r\n                //Append\r\n                _applyTransition(order.in, \"in\", order.ops, ()=> {\r\n                    if(order.in) order.out?.appendChild(order.in);\r\n                    smartOutro?.adjust?.(order.in, order.ops);\r\n                });\r\n            }\r\n            //Insert after old element before removing\r\n            else _applyTransition(order.in, \"in\", order.ops, ()=> {\r\n                order.out?.after(order.in);\r\n                smartOutro?.space?.(order.in, order.out);\r\n                smartOutro?.adjust?.(order.in, order.ops);\r\n\r\n                //Remove old element\r\n                if(order.relation === \"/\") _applyTransition(order.out, \"out\", order.ops);\r\n            });\r\n\r\n            order.done?.(order.in);\r\n        }\r\n    }\r\n\r\n    workArray = [];\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el \r\n * @param {\"in\" | \"out\"} dir \r\n * @param {Partial<MfldOps>} ops \r\n * @param {Function} [fn] \r\n * @returns \r\n */\r\nfunction _applyTransition(el, dir, ops, fn) {\r\n    //Handle text nodes\r\n    if(el?.nodeType == Node.TEXT_NODE) {\r\n        let text = el.textContent;\r\n        let newNode = globalThis.document?.createElement(\"div\");\r\n        newNode.textContent = text;\r\n        el.replaceWith(newNode);\r\n        el = newNode;\r\n    }\r\n\r\n    if(el) {\r\n        let dur = Array.isArray(ops.trans?.dur) ? ops.trans?.dur[dir == \"in\" ? 0 : 1] || ops.trans?.dur[0] : ops.trans?.dur || 0;\r\n\r\n        //Initiate transition\r\n        let transClass = ops?.trans?.class || \"cu-trans\";\r\n        el?.classList?.add(transClass);\r\n        ops.trans?.hooks?.[`${dir}-start`]?.(el);\r\n\r\n        //Wait to apply class\r\n        if(dir == \"out\") {\r\n            _scheduleDomUpdate(()=> {\r\n                smartOutro?.size?.(el);\r\n                if(dur) el.style.transitionDuration = `${dur}ms`;\r\n                el.classList?.add(dir);\r\n            })\r\n        }\r\n        //If dir == in\r\n        else {\r\n            setTimeout(()=> {\r\n                _scheduleDomUpdate(()=> {\r\n                    if(dur) el.style.transitionDuration = `${dur}ms`;\r\n                    el?.classList?.add(dir);\r\n                    fn?.();\r\n\r\n                    //Remove transition class\r\n                    _scheduleDomUpdate(()=> {\r\n                        el?.classList?.remove(dir);\r\n                    });\r\n                });\r\n            }, ops.trans?.swap || 0);\r\n        }\r\n        \r\n        setTimeout(()=> {\r\n            _scheduleDomUpdate(()=> {\r\n                //Wrapup\r\n                if(dir == \"out\") el?.remove();\r\n                el?.classList?.remove(transClass);\r\n                el?.classList?.remove(dir);\r\n                ops.trans?.hooks?.[`${dir}-end`]?.(el);\r\n            });\r\n        }, \r\n        dur + (dir == \"in\" ? ops.trans?.swap || 0 : 0));\r\n    }\r\n}","import { _scheduleDomUpdate } from \"./domUpdates.js\";\r\n\r\n//Track scripts and styles\r\nlet pageScripts = new WeakMap();\r\nlet pageStyles = new WeakMap();\r\nlet parser = globalThis.DOMParser ? new DOMParser() : undefined;\r\n\r\n/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\r\n\r\n//Fetch page and replace content\r\n/**\r\n * \r\n * @param {MfldOps} ops \r\n * @param {{method: string, href: string, el: HTMLElement}} target\r\n * @param {(el: HTMLElement | null)=> void} done \r\n * @returns \r\n */\r\nexport async function _fetchHttp(target, ops, done) {\r\n    if(!parser) return;\r\n    //Make sure we're allowed to fetch\r\n    if(!ops.fetch?.externals?.some(allowed=> target?.href?.startsWith(allowed.domain))) {\r\n        //Fetch data\r\n        let fOps = ops.fetch;\r\n        let data = await fetch(target?.href, {\r\n            ...(fOps?.request || {}),\r\n            method: target?.method,\r\n            body: fOps?.request?.body ? JSON.stringify(fOps?.request?.body || {}) : undefined,\r\n        })\r\n        .catch(error=> {\r\n            fOps?.err?.(error);\r\n        });\r\n\r\n        //Handle onCode callback\r\n        let code = data?.status;\r\n        if(code && fOps?.onCode?.(code) == false) return;\r\n\r\n        //Return JSON or text in callback\r\n        let text = await data?.[ops.fetch?.type || \"text\"]();\r\n        ops.fetch?.cb?.(text);\r\n\r\n        if((ops?.fetch?.type) != \"json\") {\r\n            //Extract content\r\n            let fullMarkup = parser.parseFromString(text, 'text/html').body;\r\n        \r\n            // //Clear existing scripts/styles\r\n            // clearDynamicElements(parent, pageScripts, \"script\");\r\n            // clearDynamicElements(parent, pageStyles, \"style\");;\r\n\r\n            // //Get scripts and styles\r\n            // let seek: string[] = ops.allowScripts ? [\"scripts\"] : [];\r\n            // if(ops.allowStyles) seek.push(\"style\");\r\n            // if(seek.length) {\r\n            //     let globls: NodeListOf<HTMLScriptElement | HTMLStyleElement> = fullMarkup.querySelectorAll(seek.join(\",\"));\r\n            //     for(let el of globls) {\r\n            //         let isScript = el instanceof HTMLScriptElement;\r\n            //         let source = isScript ? pageScripts : pageStyles;\r\n\r\n            //         if(isScript ? ops.allowScripts : ops.allowStyles){\r\n            //             if(!source.has(parent)) source.set(parent, []);\r\n            //             source.get(parent)?.push(el as any);\r\n            //         }\r\n            //         else if(isScript) el.parentNode?.removeChild(el);\r\n            //     }\r\n            // }\r\n\r\n            // ops.replace.forEach(r => {\r\n            //     let [ extract, relation, replace ] = r.split(/\\s*(>|\\/|\\+)\\s*/);\r\n\r\n            //     // let outEl = [\"this\", \"self\"].includes(replace) ? parent : document.querySelector(replace);\r\n// globalThis.document?.\r\n            //     _scheduleDomUpdate({\r\n            //         in: /** @type {HTMLElement} */ (fullMarkup.querySelector(extract)),\r\n            //         out: /** @type {HTMLElement} */ ([\"this\", \"self\"].includes(replace) ? parent : document.querySelector(replace)),\r\n            //         relation,globalThis.document?.\r\n            //         ops,\r\n            //         done,\r\n            //     })\r\n            // });\r\n        }\r\n    }\r\n}\r\n\r\n// //Clear dynamic elements\r\n// function clearDynamicElements(parent: HTMLElement, map: WeakMap<HTMLElement, any[]>, type: string) {\r\n//     let elements = map.get(parent) || [];\r\n//     elements.forEach(el => el.remove());\r\n//     map.set(parent, []);\r\n// }","import { _store } from \"./store.js\";\nimport { _fetchHttp } from \"./http.js\";\nimport { _scheduleDomUpdate } from \"./domUpdates.js\";\n/** @typedef {import(\"./index.module.js\").MfldOps} MfldOps */\n\nlet _commaSepRx = /, {0,}/g;\nlet _elIdx = 0;\n\n// globalThis.addEventListener(\"popstate\", (e)=> {\n//     let el = document?.getElementById(e.state?.elId);\n//     if(e?.state?.fetchData) {\n//         _fetchHttp(\n//             \"get\", \n//             \"\",\n//             e.state.fetchData,\n//             el,\n//             el=> {if(el) _registerSubs(el)}\n//         );\n//     }\n// });\n\n/** @type {Partial<MfldOps>} */\nlet _ops = {};\nlet _modes = [\"bind\", \"sync\", \"fetch\"];\n\n/**!\n * @param {Partial<MfldOps>} newops \n * @param {string} [profileName] \n */\nexport function _setOptions(newops, profileName) {\n    if(profileName) _ops.profiles = { ..._ops.profiles, [profileName]: newops };\n    else _ops = { ..._ops, ...newops };\n}\n\n//Register subscriptions on the DOM (scopable in case an update needs run on a subset of the DOM)\n/**\n * @param {HTMLElement | null} [parent] \n */\nexport function _registerSubs(parent) {\n    let modes = `[data-${_modes.join(\"],[data-\")}],[data-cu-${_modes.join(\"],[data-cu-\")}],[cu-${_modes.join(\"],[cu-\")}]${_ops.fetch?.auto != false ? \",a\" : \"\"}`;\n    \n    /** @type {NodeListOf<HTMLElement> | []} */\n    let els = (parent || document.body).querySelectorAll(modes) || [];\n\n    for(let el of els) {\n        /** @type {HTMLElement} */\n        if(!el.id) el.id = `cu-${_elIdx++}`;\n\n        //Loop over all data attributes (modes)\n        for(let mode of _modes) {\n            let shouldHaveTriggers = mode != \"bind\";\n            let err_detail = `(#${el.id} on ${mode})`;\n\n            const settings = el.getAttribute(`data-${mode}`) || el.getAttribute(`cu-${mode}`) || el.getAttribute(`data-cu-${mode}`);\n            settings?.split(\";\").forEach(setting=> {\n                //Break out settings\n                let _parts = setting?.split(/(?:(?:\\)|->) ?){1,}/g) || []; \n        \n                //Extract settings\n                let triggers = shouldHaveTriggers ? _paramsInParens(_parts.splice(0,1)[0]) : [];\n                let processFuncName = _parts[0]?.includes(\"(\") ? _parts[0]?.match(/^[^\\(]{1,}/)?.[0] || \"\" : \"\";\n                let output = _paramsInParens(_parts.splice(mode == \"sync\" ? 1 : 0, 1)[0]);\n                let input = _paramsInParens(_parts[0]);\n\n                //Handle errors\n                if(shouldHaveTriggers && !triggers?.length) throw(`No trigger: ${err_detail}.`)\n\n                /** @type {Function | undefined} */\n                let processFunc;\n                if(processFuncName) {\n                    processFunc = globalThis[processFuncName] || globalThis.Mfld_funcs?.get(processFuncName);\n                    if(!processFunc) throw(`\"${processFuncName}\" not registered: ${err_detail}`);\n                    if(((!shouldHaveTriggers && output.length > 1) || (shouldHaveTriggers && input.length > 1))) throw(`Multiple sources: ${err_detail}`);\n                }\n\n                //Map output names and paths\n                let outputData = output.map((ext)=> {\n                    let [ name, ...sourcePathArr ] = ext.split(/[\\.\\[\\]\\?]{1,}/g);\n                    return {\n                        name,\n                        path: sourcePathArr.map(sp=> !isNaN(parseInt(sp)) \n                            ? parseInt(sp) \n                            : sp)\n                            .filter(sp=> sp) /** @type {(string | number)[]} */\n                    }\n                });\n\n                //Loop over triggers\n                if(!triggers?.length) triggers = [\"\"]\n                for(let trigger of triggers) {\n                    //No input loops for fetch\n                    if(mode == \"fetch\") {\n                        _handleFetch(el, trigger, output, input, _ops);\n                    }\n\n                    //Loop over input\n                    if(!input?.length) input = [ \"\" ];\n                    for(let i=0; i < input.length; i++) {\n                        //Handle bind\n                        if(mode == \"bind\") {\n                            let domSubscription = ()=> {\n                                _scheduleDomUpdate(()=> {\n                                    el[input[i]] = processFunc?.(\n                                        ...outputData.map(\n                                            s=> _nestedValue(_store(s.name)?.value, s.path)\n                                        ), el\n                                    ) ??\n                                    _nestedValue(\n                                        _store(outputData[0].name || \"\")?.value, outputData[0].path\n                                    );\n\n                                    //Make sure to update dependent stores on value update\n                                    el.dispatchEvent(new CustomEvent(trigger))\n                                });\n                            }\n                        \n                            //Add subscription - run whenever store updates\n                            for(let store of outputData) _store(store.name)?._addSub(el.id, domSubscription);\n                        }\n\n                        //Handle sync\n                        else if(mode == \"sync\") {\n                            if(outputData.length > 1) throw(`Only one store supported: ${err_detail}`)\n                            let ev = ()=> {\n                                let value = el[input[i].trim()];\n                                \n                                if(processFunc) value = processFunc?.(value, el);\n                                const store = _store(outputData[0]?.name);\n                                \n                                if(value !== undefined) {\n                                    store?.update?.(curVal=> {\n                                        return outputData[0]?.path?.length ? _nestedValue(curVal, outputData[0]?.path, value) : value\n                                    });\n                                }\n                            }\n                            el.addEventListener(trigger, ev);\n                        }\n                    }   //End loop input\n                }   //End loop triggers\n            }); //End loop settings\n        }   //End loop dataset modes\n    };  //End loop elements\n}\n\n//Get or set nested store values\n/**\n * \n * @param {any} obj \n * @param {(string | number)[]} path \n * @param {any} [newval] \n * @returns \n */\nfunction _nestedValue(obj, path, newval) {\n    let ptr = obj;\n\n    for(let key of path) {\n        //Dynamically construct object if it doesn't exist\n        if(ptr == undefined) ptr = typeof key == \"number\" ? [] : {};\n\n        //Set or get value\n        if(newval == undefined || path[path.length - 1] !== key) ptr = ptr instanceof Map ? ptr?.get(key) : ptr?.[key];\n        else ptr instanceof Map ? ptr.set(key, newval) : ptr[key] = newval;\n    }\n\n    return ptr;\n}\n\n/**\n * @param {string} str \n * @returns \n */\nfunction _paramsInParens(str) {\n    if(str?.includes(\"(\")) {\n        let matches = str.match(/[^\\(\\)]{1,}/g);\n        str = matches?.[matches.length - 1] || \"\";\n    }\n    return str?.split(_commaSepRx)?.map(s=> s.trim()) || [];\n}\n\n/**\n * @param {HTMLElement} el \n * @param {string} trigger \n * @param {string[]} output \n * @param {string[]} input \n * @param {Partial<MfldOps>} ops \n */\nfunction _handleFetch(el, trigger, output, input, ops) {\n    /**\n     * @param {Event} [e]\n     */\n    let ev = e=> {  \n        e?.preventDefault();\n        e?.stopPropagation();  \n\n        let fetchData = {\n            ...ops,\n            ...ops.profiles?.[el.dataset[\"overrides\"] || \"\"] || JSON.parse(el.dataset[\"overrides\"] || \"{}\") || {},\n        };\n\n        /** @type {any} */ let target = e?.target;\n        if([\"click\", \"submit\"].includes(trigger) || [\"A\", \"FORM\"].includes(target?.nodeName)) {\n            history.pushState(\n                {fetchData, elId: el.id}, \n                \"\", \n                target?.href || target?.action || \"\"\n            );\n        }\n\n        _fetchHttp(\n            {\n                method: el.dataset[\"method\"]?.toLowerCase() || \"get\",\n                href: target?.href,\n                el\n            },\n            fetchData,\n            el=> {if(el) _registerSubs(el)}\n        );\n    }\n\n    if(trigger == \"mount\") {\n        ev();\n    }\n    else el.addEventListener(trigger, ev);\n}","import { _store, _addToNextTickQueue } from \"./store.js\";\nimport { _registerSubs, _setOptions } from \"./registrar.js\";\nimport { _scheduleDomUpdate } from \"./domUpdates.js\";\n\n/**! @typedef {\"in-start\"|\"in-end\"|\"out-start\"|\"out-end\"} HookKey*/\n\n/**!\n * @typedef {object} ExternalOptions\n * @property {string} domain - The domain name these settings apply to\n * @property {boolean} [scripts] - Allow scripts from this domain to execute\n * @property {boolean} [styles] - Allow styles from this domain to apply\n */\n\n/**!\n * @typedef {object} FetchOptions\n * @property {RequestInit} [request] - Fetch request options\n * @property {\"json\"|\"text\"} [type] - Response type (default: \"text\")\n * @property {(val: any)=> void} [cb] - Callback function - run on successful fetch; *val* is the un-parsed response body\n * @property {(err: Error)=> void} [err] - Error callback - run on fetch error\n * @property {(code: number)=> boolean | void} [onCode] - Callback function - run on fetch response code; return `false` to prevent further processing\n * @property {boolean} [auto] - Automatically fetch content on page load\n * @property {ExternalOptions[]} [externals] - External domain fetch settings\n */\n\n/**!\n * @typedef {object} TransitionOptions\n * @property {string} [class] - CSS class applied to transitions (default: `cu-trans`)\n * @property {[number, number] | number} [dur] - Transition duration: [in, out] or single value (in ms); default: 300\n * @property {number} [swap] - Swap delay (in ms) - applied between one element's outro start and the replacement's intro start; default: 0\n * @property {{ [key in HookKey]?: (el: HTMLElement)=> void }} [hooks] - Transition hooks\n */\n\n/**!\n * Manifold options for `fetch`, `trans`, and `profiles`.\n * @typedef {Object} MfldOps\n * @property {{ [ key: string ]: Partial<MfldOps> }} [profiles] - Fetch profiles assignable to elements\n * @property {FetchOptions} [fetch] - Fetch options - see https://google.com\n * @property {TransitionOptions} [trans] - Transition settings - see https://google.com\n */\n\n/**!\n * @template T\n * @callback UpdaterFunction\n * @param {Array<any>} upstreamValues\n * @param {T} value\n * @returns {T | Promise<T>}\n */\n\n/**!\n * @template T\n * @typedef {Object} StoreOptions\n * @property {T} [value]\n * @property {Array<string>} [upstream]\n * @property {UpdaterFunction<T>} [updater]\n */\n\n/**!\n * @template T\n * @typedef Store\n * @prop {T} value - The store's current value (read only)\n * @prop {function(T | function(T):T|Promise<T>|undefined):T|Promise<T>|undefined} update - Update the store's current value\n * @prop {function(function(T):void):void} sub - Add a subscription function to the store\n */\n\n/**!\n * @typedef {Function} MfldFunc\n * @param {any} val\n * @param {HTMLElement} [el]\n */\n\n/**!\n * The global Manifold interface.\n */\nexport const Mfld = {\nstore: \n/**!\n* - Create or overwrite a _typed_ global Manifold store by passing `store_ops` (`MfldOps`) -> *returns `Store\\<T\\>`* \n* - Retrieve an untyped reference to the store specified by name by omitting `store_ops` -> *returns `Store\\<any\\>`*\n* @template T\n* @param {string} store_name\n* @param {StoreOptions<T> | T} store_ops\n* @return {Store<T>}\n*/ (store_name, store_ops)=> {\n    if(!store_ops?.hasOwnProperty(\"value\") && !store_ops?.hasOwnProperty(\"updater\")) {\n        store_ops = /** @type {StoreOptions<T>}*/({ value: /** @type {T}*/store_ops });\n    }\n    return /**@type {Store<T>}*/(_store(store_name, /**@type {StoreOptions<T>}*/store_ops))\n},\nustore: \n/**!\n* - Create or overwrite an untyped global Manifold store by passing `store_ops` (`MfldOps`) -> *returns `Store\\<any\\>`* \n* - Retrieve an untyped reference to the store specified by name by omitting `store_ops` -> *returns `Store\\<any\\>`*\n* @param {string} store_name\n* @param {StoreOptions<any> | any} store_ops\n* @return {Store<any>}\n*/ (store_name, store_ops)=> /**@type {Store<any>}*/(_store(store_name, store_ops)),\nget:\n/**!\n * - Retrieve a Manifold store by name. *returns `Store\\<any\\>`*\n * @param {string} store_name\n * @return {Store<any>}\n */ (store_name)=> /**@type {Store<any>}*/(_store(store_name)),\nfunc: \n/**!\n * - Retrieve a Manifold function by name. *val* refers to the store's current value; *el* refers to the element that triggered the update (if applicable). *returns `MfldFunc`*\n * - *Note:* Functions retrived using this method cannot infer the type of the store's value and is therefore **not** type-checked. It is preferable to keep a reference to the function if you need to preserve type information.\n * @param {string} func_name\n * @return {MfldFunc}\n */ (func_name)=> /** @type {(val: any, el?: HTMLElement)=> void}*/(globalThis.Mfld_funcs?.get(func_name)),\nfuncs: \n/**!\n * - Add functions to the Manifold function registry in key-value pairs.\n * - Functions must be registered in order to be accessible to HTML elements via `bind`, `sync`, and `resolve`. \n * - It may still be beneficial to keep a reference to the original function if you need to preserve type information.\n * @param {{ [key: string]: MfldFunc }} funcs\n */ funcs=> {for(let key in funcs) globalThis.Mfld_funcs.set(key, funcs[key])},\nconfig:\n/**!\n * - Set Manifold configuration options, including `trans` (DOM transition settings), `fetch` (fetch options), and `profiles` (configuration option overrides that can be set on elements ad-hoc via `cu-overrides`).\n * - Providing the optional `profileName` parameter allows you to save the configuration as a named profile. Otherwise, the profile is saved as the default configuration.\n * @param {MfldOps} new_ops\n * @param {string} [profile_name]\n */ (new_ops, profile_name)=> _setOptions(new_ops, profile_name),\n onTick:\n /**!\n  * - Wait for the next Manifold data update cycle to complete before executing the callback function.\n  * @param {()=> void} cb\n  */ (cb)=> _addToNextTickQueue(cb),\n  register:\n  /**!\n   * - Register Manifold subscriptions on the DOM. *Optional:* Pass an `HTMLElement` or selector string to scope the registration to a specific element.\n   * @param {HTMLElement | string | null} [parent]\n   */ (parent)=> {\n    if(typeof parent == \"string\") parent = /** @type {HTMLElement | null}*/(document.querySelector(parent));\n    _registerSubs(parent)\n   },\n};"],"names":["_hashAny","input","Map","Array","from","entries","Set","hash","char","TextEncoder","encode","toString","_nextTickQueue","globalThis","Mfld_stores","Mfld_funcs","_workCacheTimeout","_workOrder","Store","updater","undefined","_subscriptions","_storedHash","_downstreamStores","_upstreamStores","constructor","name","ops","this","_modify","set","upstream","storeName","_store","push","value","_addSub","ref","sub","repeat","replace","c","Math","floor","random","update","Promise","resolve","clearTimeout","setTimeout","async","_","store","forEach","d","delete","u","has","downstream","newValue","newHash","S","clear","_autoUpdate","fn","map","found_store","get","smartOutro","workArray","cancelAnimationFrame","_scheduleDomUpdate","requestAnimationFrame","_runDomUpdates","order","includes","relation","container","document","createElement","child","out","childNodes","appendChild","replaceChildren","_applyTransition","space","in","adjust","after","done","el","dir","nodeType","Node","TEXT_NODE","text","textContent","newNode","replaceWith","dur","isArray","trans","transClass","class","classList","add","hooks","size","style","transitionDuration","remove","swap","parser","DOMParser","_commaSepRx","_elIdx","_ops","_modes","_nestedValue","obj","path","newval","ptr","key","length","_paramsInParens","str","matches","match","split","s","trim","_handleFetch","trigger","output","ev","e","preventDefault","stopPropagation","fetchData","profiles","dataset","JSON","parse","target","nodeName","history","pushState","elId","id","href","action","fetch","externals","some","allowed","startsWith","domain","fOps","data","request","method","body","stringify","catch","error","err","code","status","onCode","type","cb","parseFromString","_fetchHttp","toLowerCase","addEventListener","Mfld","store_name","store_ops","hasOwnProperty","ustore","func","func_name","funcs","config","new_ops","profile_name","_setOptions","newops","profileName","onTick","register","parent","querySelector","modes","join","auto","els","querySelectorAll","mode","shouldHaveTriggers","err_detail","settings","getAttribute","setting","processFunc","_parts","triggers","splice","processFuncName","outputData","ext","sourcePathArr","sp","isNaN","parseInt","filter","i","domSubscription","dispatchEvent","CustomEvent","curVal","_registerSubs"],"mappings":"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"}